%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R9yc5a9_1s4tpcu_1lw.tmp.pdf
%%Creator: Adobe Acrobat 11.0.19
%%For: Starrysky
%%CreationDate: 2019/01/13, 13:28:30
%%BoundingBox: 0 0 293 194
%%HiResBoundingBox: 0 0 292.1514 193.5029
%%CropBox: 0 0 292.1514 193.5029
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1267 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2019-01-13T13:27:07+08:00"
   xmp:CreateDate="2019-01-13T13:27:07+08:00"
   xmp:MetadataDate="2019-01-13T13:27:07+08:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f402abb8-8ce3-4c6b-b583-0a7a66071786"
   xmpMM:InstanceID="uuid:eaccafda-4db6-484d-8822-7f8e2dfbd7d4"
   pdf:Producer="iText 2.1.5 (by lowagie.com)">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sparse Principal Component Analysis</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Journal of Computational and Graphical Statistics 2006.15:265-286</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Hui Zou, Trevor Hastie and Robert Tibshirani</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 {
<~!!*-'"9eu7#RLhG$k3[W&.oNg'GVB"(`=52*$$(B+<_pR,UFcb-n-Vr/1iJ-0JP==1c70M3&s#]4?Ykm
5X@_(6q'R884cEH9MJ8X:f1+h<)lt#=BSg3>[:ZC?t!MSA7]@cBPD3sCi+'.E,fo>FEMbNG^4U^I!pHn
J:W<)KS>/9Ll%"IN/`jYOHG]iPa.Q$R$jD4S=Q7DTV8*TUnsrdW2ZetXKAY/Yd(L?['d?O\@K2_]Y2%o
^qmn*`5Ta:aN;TJbg"GZd*^:jeCE.%f\,!5gtgiEi8N\UjQ5OekiqBum-X60nF?)@o_%qPq"ad`r;HWp
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 0 sub 255 div mul 0 add
dup 0 lt{pop 0 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
/1 {
<~J,k+MJH:=QJc^OUK*-aYKEQs]Ka!0aL'EBeLBiTiL^8fmM$]#qM@,5uM[PH$N!tZ(N=Cl,NXh)0Nt7;4
O:[M8OV*_<OqNq@P7s.DPSB@HPnfRLQ55dPQPZ!TQl)3XR2ME\RMqW`Ri@idS/e&hSK48lSfXJpT-'\t
THKo#Tcp,'U*?>+UEcP/Ua2b3V'Vt7VC&1;V^JC?W$nUCW@=gGW[b$KX"16OX=UHSXY$ZWXtHl[Y:m)_
YV<;cYq`MgZ8/_kZSSqoZo#.s[5GA"[PkS&[l:e*\2_".\N.42\iRF6]0!X:]KEj>]fj'B^-99F^H]KJ
^d,]N_*PoR_Eu,V_aD>Z`'hP^`C7bb`^[tfa%+1ja@OCna[sUrb"Bh!b=g%%bY67)btZI-c;)[1cVMm5
cqr*9d8A<=dSeNAdo4`Ee5XrIeQ(/MelLAQf2pSUfN?eYfid"]g034agKWFegg&Xih-JjmhHo'qhd>9u
i*bL$iF1^(iaUp,j(%-0jCI?4j^mQ8k%<c<k@`u@k\02Dl"TDHl>#VLlYGhPltl%Tm;;7XmV_I\mr.[`
n8RmdnT"*hnoF<lo5jNpoQ9`tol]s#p3-0'pNQB+piuT/q0Df3qKi#7qg85;r-\G?rI+YCrdOkGs*t(K
~>
exch 0 sub 255 0 sub 1 0 sub div mul 0 add
dup 255 gt{pop 255 }if cvi
1 mul 1 getinterval
0 get
1 -1 sub 255 div mul -1 add
dup -1 lt{pop -1 }if
dup 1 gt{pop 1 }if

} bind /Procedure add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -193.503 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 193.503 li
292.151 193.503 li
292.151 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: NBIAAA+Times-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /NBIAAA+Times-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Roman) def
/ItalicAngle 0 def
/BaseFontName (Times-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 89 /Y put
def
/FontBBox {-168 -218 1000 898} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-14 -0 662 676 450 460 683 683] def
/OtherBlues [262 270 -218 -217] def
/FamilyBlues [-14 -0 450 460 662 676] def
/FamilyOtherBlues [-218 -217 262 270 394 394] def
/StdHW [28] def
/StdVW [84] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/A <1C60D8A8C9B6079F1E48848039BAD53EF75083A15B245763DB78818AFF61
A16A1320ECEE497C9F16C5A9970A7745608AF8FED49797B2C617F48878314ECB
9388DC87C41E0CC6BE34027C1122095499F934B9D2E8FCDB060A9CB7A2718077
27C28B32415ED07DCC7001E6D3C85F5AEC7FFEE39DAFE67E7733CC865438> |-
/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1BEC23C2AC3C7BB2
4FE587EAFC58752906FDF803B7EE08CC0EEA6D4DF528ED9A25AEB8763A1E0F33
51E8367C0E0AF3723CBF0E47B6C61A46C0C9B9B14422A38EEC6A11432287BB1A
AA047F2C2F93CA4A999D93CAB432079751D1C3EA> |-
/E <1C60D8A8C9B7D8BE6A6EDEC7A42842EA4F0E34B06A7ADB9E9D606CC179C8
C106C498D8C31750ADF7168F9C384D18F5B3E9F35EBFB6818E179DD0D7CACCAA
FD2F3A66F4207F2991F9E8E5F10631AD96E779D68C3DDBA38AF95AF86FC8835D
1EB04D73306C4ADB04B49FA3DF42FF005DB7E3E54329CAC27610F5CEE7B7581B
B77FB5AE7F6E0B9688143FA853BCC63D807B575E10D4D6FFD9D8E19CAE0C8F02
77562B41F7FD59FC04FA6FC55F110EBF43148B35D9A3C5A98544> |-
/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7CEBA53BA35C0D637783657
13E4937D45432C22967EB42DF6DA1495947FD682A87B83F3472A9AC53AFF202C
ED526C6E0626B1> |-
/L <1C60D8A8C9B7D8BE6A6D10833A58E10E35AAF0D74F28161F1E96F93676A5
2EBF6FCEE0F833224946C62AB4825949DCD38F43112D2F78458FF85000573083
054640F9BEF9D64C20B231AD48404F645607CB5F4CDB2A6BFD9D45ADC27D5BF3
58972E357CAF472CF1479518> |-
/M <1C60D8A8C9B59F859BE0FB9A2A0F7654C6EDCAEDEE9F7FF916442D9C9F4E
D6F42D0588BBB70AFF4A34C797748BF897F607B52C72A4CB4A45FE66E245A32A
75D88FD8959E00389A6DBAED16321CC2D91DF069B6D6467D128CC5B30A969384
52FCD034FAF7C4DC50E3464B901F68B77945A36B587B81F6A85C08C5E954DCBE
A7AEB21BCCFA49> |-
/N <1C60D8A8C9B6079F1E48848E88AD51D864EC24104C6DD11D55A63CFF3E9C
756106D0E97B2A535F11521FC421A87DB7AA1BB7E5E72F9C1F26749CEA608791
28C49F034519E4F1E3D0B2668109027E7AE954A9FBCDB8C98F28D8FD5566696A
FD7E7E86478C98CFD0142A5D34CA87950DF8C96F24696E1A4263A162D3B7D031
8A42AFF3> |-
/O <1C60D8A8C9B6079FE817D875D2CBFFB503E7661914031DEF82D4082D7029
995CDB5B363791EF40B5AF7B3843B9E472E4F50B8472BF0DFE33E4CD5D7DBCF3
EB6D302111F8799A9C032144A0C9CB2E8226B631DA3032A3884790267BD00E4E
CAADF3> |-
/P <1C60D8A8C9B7EF32570E39CC82D8FC3971C64FFF40AB84806AE53A80D003
59C85B6AFD0D4E4516E6F925E114CB5694CA3C3BB5BD1D3AACEA6F4D4E17877A
A50A9AB3B90A72FF729470C063D06BEEAA5184A0D925F90DCE26119419701EB2
53AFCA84A1D0339652DC6259CB60A6C47C07B17E94492CCC7FA176E9C4175D61
D356F93D23B513D5121081D0F8AD8E04BD4C29CCCFFE386A44> |-
/R <1C60D8A8C9B64EDF88216CF039522D2CD16031C14F48AE18706656314B55
A44D32F713967A5EF8844C033ACCF3957E344151100D1C83334794F24CBE3A1B
9AF4A82F4D6C7CD452B51143B0C6F97C0FA861F03E4C420C96B9F0EC4B2245F8
CD654119EBE887016A0D90A29861BC0C36838B5464E1DB93F15F4476DA9E07D5
97F3D2EA5732F6E8BF74573804D1C1542747A58851CA05BA5FA2416A905DAF1E
03CC5FD0906576F6C98C075D633B8EC1BE9755F5EC40> |-
/S <1C60D8A8C9B7EF32A193189DA2467EEF90BB4843AFCD07682C17FCB181C3
F70B0CA8436486C289ED34AE435D16FF1CB07A2B01CAD9573442FA519C68EF9A
198BFAE5C4A460021A5C56FEA9BD8D624F7DAF5F40358D4BEEF4C33B8CA9313A
0976CADAB3AF967336E068B5FDB3E208F4079D52BB0970F735315F1E256DFA87
D04984A8> |-
/T <1C60D8A8C9B7D8BE7EA0B64700DC8E438573301CAC4344B7D410E182F881
F58CB0EE6C7200F45451BF195D6B4EC9CF9C8B176B767CF2064CDC4BF9C3DA0B
6A6FF54C56F67DE1F05535B028AE5A1E7C736084EB09A8A00FEB9607E1E016> |-
/Y <1C60D8A8C9B6079F1E48848E88AD51D8AA3C768145CDCFEDAB6B83C487A6
9F31930A579C115CC8C7B6544BBBD866CC3DFFD379BB9B60E13ECCDC0F741A90
8D74DDE0F7C507AF7F488799737D8C65256B95AF5C7D5B4FFD0CAB79A3BC373F
5C626243062B54DB0912782D7331A8EA0D3C3A5D6A6ADF4E004A15874BC55709> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAE+Times-Roman /NBIAAA+Times-Roman findfont ct_VMDictPut
/SMGPAE+Times-Roman*1 
[65{/.notdef}rp /A /.notdef /C /.notdef /E 3{/.notdef}rp /I 
2{/.notdef}rp /L /M /N /O /P /.notdef /R 
/S /T 4{/.notdef}rp /Y 166{/.notdef}rp]
SMGPAE+Times-Roman nf
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
70.5306 -13.1788 mo
(S)sh
SMGPAE+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
76.0688 -13.1788 mo
(PARSE)
[3.87674 5.03438 4.65088 3.87674 0 ]xsh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
100.258 -13.1788 mo
(P)sh
SMGPAE+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
105.797 -13.1788 mo
(RINCIPAL)
[4.65088 2.32153 5.03438 4.65088 2.32153 3.87672 5.03439 0 ]xsh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
140.438 -13.1788 mo
(C)sh
SMGPAE+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
147.082 -13.1788 mo
(OMPONENT)
[5.03439 6.19905 3.87675 5.03436 5.03439 4.26025 5.03436 0 ]xsh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
188.306 -13.1788 mo
(A)sh
SMGPAE+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
195.498 -13.1788 mo
(NALYSIS)
[5.03439 5.03439 4.26022 5.03439 3.87674 2.32153 0 ]xsh
%ADOBeginSubsetFont: QDGBAA+Times-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /QDGBAA+Times-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (Times-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 53 /five put
dup 55 /seven put
def
/FontBBox {-168 -218 1000 935} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 676 691 461 473] def
/OtherBlues [268 275 -206 -203] def
/FamilyBlues [-14 -0 450 460 662 676] def
/FamilyOtherBlues [-218 -217 262 270 394 394] def
/BlueScale 0.0437917 def
/StdVW [139] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/two <1C60D8A8C9B7A73DC524371C3B3C004F1EF6620B304256306A6A0A5762
AA367899428B22F6ADE68CCEC2617F59BF043E4548840711CC53517BD14FA803
630325F009B30B4A682500C565CA868D7DDB8125D7D9977D8201205236C2E89C
14D5F5C6C3F38345C8> |-
/five <1C60D8A8C9B7A73DCD8E7B30BA9202045C028FE54F3CEA27579060400
8953F2E92215AC7150B1A75508442200F389685FA6B21BB054950EF69D2B779E
6E2231A0F976BA0D9A4277583FE883A7CE6B9697430E6EE79D8368E5D206F113
A0F386EB2847B> |-
/seven <1C60D8A8C9B7A73DEE9439F9BA32852965A7570EE55072106153B515
A70915D6AFEEDDA329DAB28AD6209B8E8AA6D3498C2DF2DBF2> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAF+Times-Bold /QDGBAA+Times-Bold findfont ct_VMDictPut
/SMGPAF+Times-Bold*1 
[50{/.notdef}rp /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]
SMGPAF+Times-Bold nf
SMGPAF+Times-Bold*1 [8.9664 0 0 -8.9664 0 0 ]msf
314.869 -13.1788 mo
(275)
[4.4823 4.4823 0 ]xsh
148.058 10.5778 mo
149.146 13.5449 li
149.079 13.6758 149.079 13.7098 149.046 13.7758 cv
148.98 13.9398 li
148.882 14.1708 148.815 14.2059 148.618 14.2059 cv
148.52 14.2059 148.454 14.2059 148.321 14.1389 cv
148.321 14.5999 li
148.454 14.6329 148.52 14.6329 148.618 14.6329 cv
148.75 14.6329 148.915 14.6329 148.98 14.5999 cv
149.212 14.5029 149.345 14.2709 149.576 13.6439 cv
149.64 13.4799 149.706 13.3469 149.738 13.2479 cv
149.805 13.0499 149.869 12.9178 149.869 12.8528 cv
150.695 10.5778 li
150.167 10.5778 li
149.41 12.9528 li
148.618 10.5778 li
148.058 10.5778 li
.92929 .879301 .889677 .799283 cmyk
ef
266.585 101.641 mo
267.542 103.059 li
266.519 104.544 li
267.146 104.544 li
267.838 103.456 li
268.531 104.544 li
269.158 104.544 li
268.17 103.059 li
269.125 101.641 li
268.531 101.641 li
267.872 102.663 li
267.212 101.641 li
266.585 101.641 li
ef
154.255 107.312 mo
153.926 107.312 li
153.894 107.345 li
153.597 107.774 153.531 107.905 153.398 108.169 cv
153.136 108.764 153.002 109.258 153.002 109.883 cv
153.002 110.248 153.036 110.577 153.136 110.874 cv
153.267 111.335 153.432 111.665 153.86 112.358 cv
153.926 112.455 li
154.29 112.455 li
154.157 112.227 li
154.057 112.027 153.991 111.862 153.894 111.698 cv
153.63 111.104 153.531 110.577 153.531 109.949 cv
153.531 109.522 153.564 109.059 153.663 108.73 cv
153.729 108.468 153.794 108.203 153.926 107.972 cv
153.958 107.873 154.057 107.675 154.189 107.41 cv
154.223 107.377 154.223 107.345 154.255 107.312 cv
ef
155.97 107.478 mo
155.146 107.478 154.652 108.169 154.652 109.423 cv
154.652 110.708 155.113 111.433 155.97 111.433 cv
156.828 111.433 157.322 110.708 157.322 109.456 cv
157.322 108.169 156.828 107.478 155.97 107.478 cv
cp
155.178 109.324 mo
155.212 108.367 155.476 107.905 155.97 107.905 cv
156.531 107.905 156.796 108.433 156.794 109.489 cv
156.794 110.444 156.498 111.005 155.97 111.005 cv
155.443 111.005 155.178 110.444 155.178 109.456 cv
155.178 109.423 155.178 109.39 155.178 109.324 cv
ef
157.981 110.741 mo
157.981 111.335 li
158.277 111.335 li
158.277 111.698 158.178 111.862 157.981 111.862 cv
157.981 112.127 li
158.212 112.093 158.376 111.962 158.476 111.763 cv
158.508 111.698 158.542 111.565 158.542 111.467 cv
158.575 111.401 158.575 111.301 158.575 110.741 cv
157.981 110.741 li
ef
160.553 107.478 mo
159.73 107.478 159.235 108.169 159.235 109.423 cv
159.235 110.708 159.696 111.433 160.553 111.435 cv
161.411 111.433 161.906 110.708 161.905 109.456 cv
161.906 108.169 161.411 107.478 160.553 107.478 cv
cp
159.762 109.324 mo
159.795 108.367 160.058 107.905 160.553 107.905 cv
161.113 107.905 161.378 108.433 161.376 109.489 cv
161.376 110.444 161.081 111.005 160.553 111.005 cv
160.026 111.005 159.762 110.445 159.762 109.456 cv
159.762 109.423 159.762 109.39 159.762 109.324 cv
ef
162.598 107.312 mo
162.267 107.312 li
162.334 107.412 162.366 107.478 162.4 107.543 cv
162.564 107.873 162.697 108.169 162.76 108.367 cv
162.828 108.499 162.861 108.631 162.893 108.796 cv
162.993 109.159 163.026 109.39 163.026 109.785 cv
163.026 110.247 162.993 110.741 162.893 111.071 cv
162.794 111.467 162.598 111.929 162.3 112.389 cv
162.267 112.455 li
162.63 112.455 li
162.63 112.423 162.663 112.423 162.663 112.39 cv
163.29 111.533 163.553 110.741 163.553 109.851 cv
163.553 109.489 163.52 109.159 163.421 108.862 cv
163.322 108.532 163.058 108.005 162.861 107.708 cv
162.63 107.345 li
162.598 107.312 li
ef
.75 lw
1 lc
1 lj
2.613 ml
[] 0 dsh
false sadj
149.376 187.924 mo
149.376 18.2589 li
38.3317 103.092 mo
119.77 103.092 li
179.016 103.092 mo
260.42 103.092 li
@
[2.999 5.248 ] 0 dsh
45.7497 182.253 mo
48.7187 180.011 li
51.6857 177.738 li
54.6207 175.463 li
57.5857 173.22 li
60.5547 170.946 li
63.5207 168.703 li
66.4897 166.428 li
69.4217 164.187 li
72.3897 161.911 li
75.3577 159.636 li
78.3257 157.394 li
81.2937 155.119 li
84.2587 152.844 li
87.1937 150.602 li
90.1607 148.327 li
93.1287 146.086 li
99.0617 141.536 li
101.998 139.293 li
104.965 137.019 li
107.932 134.776 li
110.9 132.503 li
113.868 130.227 li
116.801 127.985 li
119.77 125.71 li
122.735 123.468 li
125.703 121.193 li
128.671 118.919 li
131.638 116.676 li
134.572 114.401 li
137.539 112.159 li
140.507 109.883 li
143.474 107.609 li
146.442 105.369 li
149.376 103.092 li
152.343 100.817 li
155.311 98.5739 li
158.277 96.2999 li
161.246 94.0568 li
164.213 91.7839 li
167.148 89.5089 li
170.115 87.2659 li
173.082 84.9899 li
176.05 82.7488 li
179.016 80.4728 li
181.984 78.1998 li
184.918 75.9578 li
187.885 73.6829 li
190.853 71.4398 li
193.821 69.1649 li
196.786 66.8909 li
199.721 64.6489 li
202.69 62.3729 li
205.657 60.1309 li
211.59 55.5818 li
214.525 53.3408 li
217.492 51.0648 li
220.459 48.8239 li
223.427 46.5488 li
226.395 44.2728 li
229.329 42.0298 li
232.296 39.7559 li
235.264 37.5139 li
238.231 35.2408 li
241.199 32.9648 li
244.166 30.7228 li
247.1 28.4459 li
250.068 26.1738 li
253.033 23.9308 li
@
1.88 lw
[] 0 dsh
45.7497 159.636 mo
48.7187 157.394 li
51.6857 155.119 li
54.6207 152.844 li
57.5857 150.602 li
60.5547 148.327 li
63.5207 146.086 li
66.4897 143.811 li
69.4217 141.536 li
72.3897 139.293 li
75.3577 137.019 li
78.3257 134.776 li
81.2917 132.503 li
84.2587 130.227 li
87.1937 127.985 li
90.1607 125.711 li
93.1287 123.468 li
99.0617 118.919 li
101.998 116.676 li
104.965 114.401 li
107.932 112.127 li
110.9 109.883 li
113.868 107.609 li
116.801 105.369 li
119.77 103.092 li
179.016 103.092 li
181.984 100.818 li
184.918 98.5739 li
187.885 96.2999 li
190.853 94.0568 li
193.821 91.7839 li
196.786 89.5089 li
199.721 87.2659 li
202.689 84.9899 li
205.657 82.7488 li
208.623 80.4728 li
211.59 78.1998 li
214.525 75.9578 li
217.492 73.6829 li
220.459 71.4398 li
226.395 66.8909 li
229.329 64.6489 li
232.296 62.3729 li
235.262 60.1309 li
238.231 57.8569 li
241.199 55.5818 li
244.166 53.3408 li
247.1 51.0648 li
250.068 48.8239 li
253.033 46.5488 li
@
1.12 lw
[3.36 5.6 ] 0 dsh
250.068 26.1738 mo
250.068 48.7908 li
@
253.133 33.3268 mo
251.386 37.1188 li
254.683 37.1188 li
253.133 33.3268 li
cp
252.935 34.2839 mo
254.024 36.8558 li
251.749 36.8558 li
252.935 34.2839 li
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DWVAAA+Times-Italic Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /DWVAAA+Times-Italic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle -15.5 def
/BaseFontName (Times-Italic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 65 /A put
dup 70 /F put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
def
/FontBBox {-169 -217 1010 883} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-18 -0 653 670 428 441 676 683] def
/OtherBlues [268 271 -209 -205] def
/FamilyBlues [-14 -0 450 460 662 676] def
/FamilyOtherBlues [-218 -217 262 270 394 394] def
/StdVW [76] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/hyphen <1C60D8A8C9B81F2C3AEF8CABFBE918BBF1E4CD834E00F7D337E68FE
6349715AA> |-
/period <1C60D8A8C9B8707CABA78EB7338F15839B8693E263993EC34B10322
5ACD1CC48F3FEA2891250C153EFE9BB> |-
/one <1C60D8A8C9B7A73DC549024B406C769550051EED2BF20930F12255E014
39C9F6D84C95E382335D9BEFC913FFA5196A156218613C1BA5E8494C01A597B8
B89660F9F0184E3126A16739A84284ED9903E3F809A28F41B1DF0788DCB15B2F
9659F9C2C52E0E60776835291A1CB7> |-
/A <1C60D8A8C9B7D8BE6A44002F647AB30D1037D683674303BD357E891C9E16
321B8ED664FDE15CC0FFE8FE5B073D4C4D33B54A164BBDA04A658AB150C58EFF
B1F074F61C5CC6143075EAAC6CF3F7ABF3D01530220A7E906BEEE7DC46D3FD29
9E9A6B1614AC4DEEC5654C0362260B7A2E74306AC2CAA731B60A7A4B4BF3D1> |-
/F <1C60D8A8C9B7D8BE6A44002FCB4CBBECEAB02B4830E3A480BD47722D2E61
B983222F69DAA87B7A8EB650C2D84EF62BE774F10B1AB352D5D65FEB00B32E97
6D15BAA1687BE36D67BD672408E106D52AC5690F9643AEFFED0C8605885BF2DC
8456800A528644632707155C55769B27739247FDFBC46FB1590B8893EEDE01D5
BB6CCDA768574D0BFF12A4EC3B7A5C0168C690C0A2CEC74CA096A6894ECF8795
85BEB52ED9CA0C5582> |-
/S <1C60D8A8C9B7A73D37FCB211DF74A3EEDB8CA3E2EA96E582C7CAFF6AF122
71D7FC54EBF537B98E3A78F395E2391EB678675E61AE07CDB929598D6E054FC2
90DF3540F3F3659E5BE986E6530EAD104C853D2E6B74D438E15F3C39EF9171E4
444AE3CE1BF6528DDFAB3AE8B19CEF7518F089C9352D5D4108FA3DB44BAFE05C
0505FE26EEACD1C6798B860147B38EBB44E458A480B82377AB8E50741818965E
DC51EBE60BB47458324F335CAAE36CCD4F7150F4C2E0DC36C36AA0E040F3A325
0765428075BC921FC8AA7571C47D526B01C65FA7760871ADF3CC16EA552FCBD9
E05114> |-
/a <1C60D8A8C9B7A73DCF5D2D361A1FE7BACB90F7ECBC39897143FAA968C42D
E5542D7C1E50C896C16D636C2B0931374312D5A913BF97E0FFE54FA376BD3BF8
9D431B814050D3DCDC2B170275D5928C2C94909A4E7BC365B3672186E2EEAF1A
CDF76A3BB344F81AE8D8112A17EA6A2BB97B55B797F2DB5F281D8B7D8F2CA3F9
0848C1E13D8168838A5B84BC9DBCDFE6796394455983F2CD7583645744549ACA
6277D21E676C268D4BAF0D407670137FC6C8D46ADF38BC2A10298A9E9ACB7238
FD126ED0E9A8AD213C70926AAD623160> |-
/d <1C60D8A8C9B7A73DCEAFB0502D19804C41A1289FBE393133212FF072816F
5E790461C8C064F8477CE1ED8EEF8D96B3CFA3E28562C084518B47A9FC15D1D1
737421795E8D724445E496F7976A135B1DBC1AD31BE0F362260B29AF913FACF8
65A2123755EA97DB5AC6B2A157F9C7949F10711E81209DCD5047371B24D64359
1CFC6B32F3841D3F6B552C8EB8094B9ADFF1146C676332F2D47309E535A774DD
EBEE2053B8CD609DFB12165934B6B268B1E4DF178DBFB2B4D00BC383AA6E22B1
55CC890817E9B5541F6267992AD118B9C32AD22F0D62C41DD8C3229F6D689F3D
7277BAEA7D72526AB82389A0FC6716EA5B2E5B43777A859C7C> |-
/e <1C60D8A8C9B77FE2B997F32F2DB91A4F584393A1EA30FBC29D24ABE1FB5A
639719D47006341803310EC93719C9A6BB29A72A60CDB34F352CE28CA4429D27
F6E313A68FCEF9BDAFD626592A1A3BEC3764DC5E56A83ECF98D274A3DC99A147
84C4D20D2B8E00BADF9632E634A97340D3> |-
/f <1C60D8A8C9B854D0F80E05032B288E000DCD85BA04E37A2202B74524FCB7
AA768FE088BD29C1696943A2DF436088939D1E35181B8044DF9B201C2C4CCAB3
A169546C3CC9393C2B2D3B1F5E794FE944B4313B7B74C4CE6C7A5C2FEA5572F9
5769F740D3A59971DC142A1ECFC71D214DE7DBEAE2930AD398036000CF887CD5
00E6EA8A14E1D3093E71843A7282D1299FEC37712ED7DAC8> |-
/g <1C60D8A8C9B7A73DB58EA1BABB86F5673E58177B13D1689217184648646A
C0CE49A237A8F103AFCDB5E06A95403549E7A196D4210B4402EA1F6468667C0C
2C3B6787D50B7662BAF4F268A1A75EABAB12FA32FF21ED2826D202C5EBD5A0F6
DEBCEC91C7CF765EA6FBA97979F6C13DEFE4ADADF94514D08EF2ABC2AE29E603
108C91E6AE51BF67EBF7CB03FE805282C15416EECD251E103E5DE3D25B0501B7
C7CE77E102933F2F823373AABE1D320BE77436B44C13261F5B7A7A9E5479A123
E93D3F1E2D923F5A124F2A805224EEC08B8E7791951347CECD41E107A74555AC
D145DBE4CDCA8031F3393B7FAE2ABCD9957D5C6425FDD083E850C7709E579400
584644A54D15474794E30C28A965872D210137816B53120FAC90636B294F60F5
329C573E3A88BB80AA7B2DFA5F610927C433F73FA9323E> |-
/h <1C60D8A8C9B7A73DCCC2CF5CE401F12D8D6DB7924E06D567BD4C5316B378
615DFC1A4A193F98D35D63DD6887BAB36EAF87D5770C7B6F7F948643E5557312
C93C533DDA3D2FC86254818DC4F91919904865874E89B1EFC06F63346956B37A
79CF22C62F730812774C08B8054B2360DD2C5A74FD08AE357C5791046F928CE1
8C6BE859D0A741952749A53F9267530321161C69802DF1990E6424A1A2F66615
B7928FAE392EC5E55F91839511A7AA9BEC7D7549AB3BD334841A7562723BD981
4F80054ABC2E69837C2A254954AD373AA47F3C3FB9> |-
/i <1C60D8A8C9B854D083AFE4C8076C657BA63BD82A3D7E02BB55195F71261E
C4B591C6EA1D396DF6159FA339AC460E6DD35D1AFD8F4A0553C23840383DC3B7
C577FC3BF631800362404C503FB58AA4F337F8DC56395F4584330FEDA44945E5
DC66E837F65C3FFF11E9B48C149526A2588649AD9B5D0EFC56CEA48750259155
363CB432DC40F1EAB5ABBBFBFB38196B4F3EF1A3800B4A0637EA4B72> |-
/l <1C60D8A8C9B854D083A339E80FC114EBCB07831E57AC3514F2B61918C12A
E930AECB34DAD158102A4D147ED3C2DD63EDAE3162F8663059064144C3CD5120
FF4FE660B3B147181B6070110F4B12934A834EB771C84CD3E89E8869DD320FB8
67D94183FC2D1D7C0514C682BE71D9FE3FD3887B89E760> |-
/n <1C60D8A8C9B7A73DCCC2CF5CE401F1233B06D0FCF55836E5289184DD7DCF
D72280F369ED1E7C8DC0B5398365B5D0A69BA3633089E60E859FEFB7168E2455
8D743820278C8A868FA2C413E63E16EAA0F89648656F10C0F164EFFEBBBB22DD
08CDFA166281900A0D5929D366D09A42442AAFCC3D08F0A1F873F3FEDF72C5EC
86937CFB1EE653B41CF89D175647F9D62E10E7D51435122CFAD4AC1C59BBEDD0
71EAFF388DF1107B4FE5A8B87B3DD758BF080D57B461C65801AB6DC5> |-
/o <1C60D8A8C9B7A73DCEB4B8D8F0C1B91E5FCECE20C383B5AFFD71070393EB
49A7159EE3D363C779DB65B9A6819883C5DF523A708308A592016FA8A5DE4010
B5ADE0B7A0F42D77D8582967C4BE9E8E36AE2292E041173379> |-
/r <1C60D8A8C9B7361F55E947F6EEB65286070565E357FB69BAF81737556C38
F514C7198DA9EADD74FDEBC97B90244C9498EADC0381CF233CEAC5C06CA32BE9
A9980BAB58552133B1C36FEDEA3FE55B4A4375965C6382236C9F7EB1AD53FD01
6FC7E6B3E01E65D32232EEABF56CA9175ACCFEAA72085838318D3B590E222FDD
0D5FA8CFE69A4FD3B2F29DD5D4ED7FFE22068516663169> |-
/s <1C60D8A8C9B7361F75CC3076C4C09851F81614EFB927F3601F05FED6D4C1
D6D94E8A00F767C01E1F3E4CE363794A0F95571AE655F7AEF8A48D41E667036E
8A1175C64EE43DAE443F38DFE1315781197FB9B8EA4742D09BA1D45F2C73AE00
61BB99A53BE5437B871174C2BB64DBF7803409406237EB8A13C12A29921F9F41
665945080AC8D2A6F40C68284E090C9A4545B7D1687D819BA5A41C050C7564AC
394C> |-
/t <1C60D8A8C9B854D083A90EFBC938A96A3D406E5A2CAF9702D718BA3D1554
4D72C81A56130620521C73D2F3B4E1FD111F0DFA9EF2C0EC96770011D0584F9E
BB0BA062CFD08BB13215B6521B5D8BF7E43412C7CBEB31C2196018424A90AC47
A0D67EEF7911A4CEE72FAAF94D9712C09FBB888DEC43DE06DA> |-
/u <1C60D8A8C9B7A73DCCC2CF5CBA95F0E04DB1CF56A49DCF5F71999C50941F
EBB4294D09C3BFE2D3CC746D2477EA02700F2E5F7D82C8DFC73B9CC0F3B4668C
EB1972630955B676ECD46594E36C75BFF53DE5CC98AE4F9E067B13670B8972EA
1669671A6A635D18D9C9E5DA2C701CA45506EAC93A50D92530D3492586D8DCE7
0B43C457A53B990AB24175324E72827BC45B0A594A79CD0E80FAB1D038EB60C6
0819190142D45BB4EEA9169D3F642AC5941D2D412297399FFE2F95D4FAF987EE
0B> |-
/w <1C60D8A8C9B64EDF8DB18FB3A4B1925FACCD9B23C972771C2EA283DF0B4E
769D194EA1DD9DA22E727062D239C931EEFF424D0212FC9111EF5E9914912119
2AF27226F6FEDABAA4F66495DDC037D753E334B5CE6E54681EB1B3123A27EEA9
DB2DF5FBE6FE5D4AB5B76F994B2E2A09116CFD1BFA6C4674359BC217C552FA7D
52ECCEAF70264FFE028B74A26B5AFE5B980388C2054B88F5520D1590EEA259D6
D7BEEFAEF08F3EC36153FA1ADD9FA1B4F34A738C0596D7F3D89A5FA8258CF729
68EA8A5C47FE0E880A938A1D3A8BC530375225BA956E48C1A7585A5FAF42C368
71FE93> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAG+Times-Italic /DWVAAA+Times-Italic findfont ct_VMDictPut
/SMGPAG+Times-Italic*1 
[45{/.notdef}rp /hyphen /period 2{/.notdef}rp /one 15{/.notdef}rp /A 4{/.notdef}rp 
/F 12{/.notdef}rp /S 13{/.notdef}rp /a 2{/.notdef}rp /d /e 
/f /g /h /i 2{/.notdef}rp /l /.notdef /n 
/o 2{/.notdef}rp /r /s /t /u /.notdef /w 
136{/.notdef}rp]
SMGPAG+Times-Italic nf
SMGPAG+Times-Italic*1 [7.9701 0 0 -7.9701 0 0 ]msf
5.56536 205.003 mo
(Figure1.Anillustrationofsoft-thresholdingrule)
[4.51022 2.21569 3.98425 3.98425 2.80474 5.53045 3.98426 11.9551 4.86888 5.97678 2.21489 2.21489 
2.21489 3.98425 3.09962 2.21489 2.98009 3.98425 2.21489 2.21489 3.98425 5.97678 3.98424 4.20822 
3.09964 3.98425 2.21487 2.2149 2.65317 2.2149 3.98425 2.80473 3.53792 3.09964 3.98425 3.98425 
2.2149 3.98425 2.2149 3.98425 5.97681 3.09964 3.98425 2.21487 0 ]xsh
%ADOBeginSubsetFont: UBRAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UBRAAA+CMMI8 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1992 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI8) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 121 /y put
def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 683 704 431 441 452 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/x <1C60D8A8C9B7C56CCD1BC9B75D21714387D3AD3ACF25872779F83EBDBCD6
CE54998B30575B69D40B2B697D333CBED0D896F89234E6F827B9F19B541AEECD
D45EC7D4F1126ACAC87C3C4D72FD40DA2D588CFB8C9AF0D6150F97A0BBCACF17
E32B0710E68246003F62B2AF95E8C00AF3FB2ACCA95B4562458782BB96AE0D72
D6A76D406E7FC05EB25A15FD9C1667627A43B16E6DD22F1CE36567E182698276
9D5C422DD7BB5E3E35F941B799D5AEBBC4B4E2730F1B5D705BCF2BBDB32026E3
1AC1304D5EC2EBCC373B5FC5716F11810C91BEE34479C921C13FD7B947EC284C
F09393A7> |-
/y <1C60D8A8C9B78E05E94577D165F6D4859CD7F4BDAF5C330024205FE32AEF
479D2F7EE81429DE5472801697CC4E204BBA8E8B32C5604048627C37AC6D7414
FE83F962B51C5294312CC2067E811CF0C7D1B4BF5F9B21126035D14C3ACEF945
B84DEE5BFB368F8E9753345D6B017BC506721BD87258208A1F93C82114D088FD
96C800104E6B157A3985B6983B2557EFFB9DC7DE211535640912246389E63D80
050393BCA39488CD412FE7DD789E30443F8632BC023C7654A9C526250CB489DA
F98164DF58725C119847B82136280B7E> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAH+CMMI8 /UBRAAA+CMMI8 findfont ct_VMDictPut
/SMGPAH+CMMI8*1 
[120{/.notdef}rp /x /y 134{/.notdef}rp]
SMGPAH+CMMI8 nf
SMGPAH+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
171.861 205.003 mo
(y)sh
%ADOBeginSubsetFont: XTCAAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XTCAAA+CMR8 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1992 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR8) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /Delta put
dup 40 /parenleft put
dup 41 /parenright put
dup 61 /equal put
def
/FontBBox {-267 -250 1070 968} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/Delta <1C60D8A8C9B59B43E5B2E30A3215A1FB7167C312341BB55D0622F95C
74B376A3DDECC03532406FF1056712326159566CD2ED95DCCC6CBCF9CA51B3F6
70BC9DD0F3077A7F5341117B8B4B862298C03B512390> |-
/parenleft <1C60D8A8C9B71EB594BAA87F31A170DCF548DAEE3311FC43FC78
A6C074493B3549D0E1827F1703C6338D1907CB557F57F502EA6D6799A8DE937E
F9683D579DF1ABAB4E74C3A1B979FDB2EF2D12A2FA9CDA68067A5474500A9603
68C6287159041D49A1> |-
/parenright <1C60D8A8C9B71EB594BAA87F31A170DCF0F44A88F271C1204DA
8CF0A554BEEB2F39FC92A6198D8CB5B5035678EDF15C268D7DFBF834C3E0481F
4D74050740572F4CCA890EC4E0E90C1B49113DEAB732B279883A40AC82E62D22
FC7681B0EFAEE5F4823C1A08D4996DA0A> |-
/equal <1C60D8A8C9B6AF04192A4BB30DDD738252E20241690489A62629F3B3
44313DD3D5F1F837570FB3ACBDAD182696C7EA47D7904E4AA1692C85CD41F507
B0C4FDE1117DD6F957380D576A13E4CC28E9DC> |-
/.notdef <1C60D8A8C9B808980A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAI+CMR8 /XTCAAA+CMR8 findfont ct_VMDictPut
/SMGPAI+CMR8*1 
[/.notdef /Delta 38{/.notdef}rp /parenleft /parenright 19{/.notdef}rp /equal 194{/.notdef}rp]
SMGPAI+CMR8 nf
SMGPAI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
178.684 205.003 mo
(=\()
[8.93451 0 ]xsh
%ADOBeginSubsetFont: WLDBAA+CMSY8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WLDBAA+CMSY8 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1992 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/BaseFontName (CMSY8) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /minus put
dup 106 /bar put
def
/FontBBox {-30 -955 1185 779} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 704] def
/OtherBlues [-126 -118] def
/BlueScale 0.039625 def
/StdHW [46] def
/StdVW [89] def
/StemSnapH [46 61] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/minus <1C60D8A8C9B6AF0419502F0B46EFB77EC3936C42E63D13542BFD0237
136A10AEC7BD6D03492B64E560DCA8583E81> |-
/bar <1C60D8A8C9B845C8785B8FAD8C11E2C828071B176F0D67BE56070E3347
799656E928A1E35A45AC6B6D8C0E04858D0196CB31> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAJ+CMSY8 /WLDBAA+CMSY8 findfont ct_VMDictPut
/SMGPAJ+CMSY8*1 
[32{/.notdef}rp /minus 73{/.notdef}rp /bar 149{/.notdef}rp]
SMGPAJ+CMSY8 nf
SMGPAJ+CMSY8*1 [7.9701 0 0 -7.9701 0 0 ]msf
190.914 205.003 mo
(j)sh
SMGPAH+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
193.266 205.003 mo
(x)sh
SMGPAJ+CMSY8*1 [7.9701 0 0 -7.9701 0 0 ]msf
198.032 205.003 mo
(j )
[4.2337 0 ]xsh
SMGPAI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
210.734 205.003 mo
(\001\))
[7.05191 0 ]xsh
%ADOBeginSubsetFont: FZLBAA+CMR6 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FZLBAA+CMR6 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1992 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR6) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
def
/FontBBox {-307 -250 1193 968} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [39] def
/StdVW [83] def
/StemSnapH [32 39] def
/StemSnapV [83 100] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/plus <1C60D8A8C9B5A99504DD9DBCC82033B9E328B869123D078E7F71293EE
99C0ADC5FD5BBA03963B62D298120684CB5B50EC5041020CC27C03AD523F37EC
78BED4520FFF432387160803E6F1B2DCE6A714AB2F106B02C894E271D4996C6> |-
/.notdef <1C60D8A8C9B71A73C3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAK+CMR6 /FZLBAA+CMR6 findfont ct_VMDictPut
/SMGPAK+CMR6*1 
[43{/.notdef}rp /plus 212{/.notdef}rp]
SMGPAK+CMR6 nf
SMGPAK+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf
221.084 206.077 mo
(+)sh
SMGPAG+Times-Italic*1 [7.9701 0 0 -7.9701 0 0 ]msf
227.172 205.003 mo
(Sign)
[3.98425 2.2149 3.98425 0 ]xsh
SMGPAI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
241.343 205.003 mo
(\()sh
SMGPAH+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf
244.635 205.003 mo
(x)sh
SMGPAI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
249.401 205.003 mo
(\))sh
SMGPAG+Times-Italic*1 [7.9701 0 0 -7.9701 0 0 ]msf
254.686 205.003 mo
(with)sh
SMGPAI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf
270.409 205.003 mo
(\001=)
[9.40466 0 ]xsh
SMGPAG+Times-Italic*1 [7.9701 0 0 -7.9701 0 0 ]msf
288.395 205.003 mo
(1.)
[3.98425 0 ]xsh
%ADOBeginSubsetFont: QDGBAA+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
SMGPAF+Times-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707C5500383F1D3BFE600CE516A971D6EA7F6AE9C87
56BC17E51C2C85C84EA248EB15468C5> |-
/one <1C60D8A8C9B7A73DC57077693EC684E6DBE19F5F702F32764E78CA8D64
20EA82D965465C90D04F776C2A668D2039B1FCEC551B2B28D74F84EDABC6B13C
DE5AC918A8A608C6CE88> |-
/A <1C60D8A8C9B6079F1E726295E14B9D3F70CD5E0B99FB5C54189240A279B5
8B7B919A72788E79254835EEB6479A6759338847EC952AA1E22C8ADF4C1F9F19
082442820F5919D1A62E8EA10491F24180442849C5A953C3F1A51FFC70622AE7
7990B1AF30131DC78F155E8B9BB9DB5DFF67> |-
/D <1C60D8A8C9B6079F1E7838DA6532DF14AC89BC0747D3B6E14282B280249A
1D0E01031FD533753E58B6C552CF5EF70786142BA5CA0CAD38B4C0D6A8308758
EA9457BA25D92BE6F9E1A28D4BCBF273E722B1AFB5558A9013E0E620A575EE01
27B4331CCC4FFC59D9F300A83BFB0AA53F985F39C19A2B05D0137DD074A84B45
2BA41ED2FFE2B994EBE1350C> |-
/E <1C60D8A8C9B64EDF881B97E2E5D84D264D6FA01EE653ED7374EAF044D90D
37BE338DF407FB75C867794D4250D63DD220700516034551C05226939AD33EAB
118BE54C951D70812429005575ECFF05541440BECE916398DB5BA7CCC10B886E
BE237CFF27E89773D8F53D685F0DD9A9D4FDE9844BDB0B654A2D862A3C5D70E0
2B926992800D51D9642E12EFA31D87D569B5E07B0A18F53783795CFB> |-
/I <1C60D8A8C9B7361F7E0A3182AF0840CF1C57BBC49E9A8C6B0AA7B6E46758
7CBB397231CD7BC1746C8C5839DD306946786BBAF8E2E1FB3B41CA7009BD13B8
07FD9CB9BFA9E93CCC74> |-
/L <1C60D8A8C9B64EDF8815C1AD7B5B26AB26BCBC091C6DF6670E573A3698A4
87FA937A76353FC8A27E3EC6331795AB1229A5461F60BB5E5612255C1FB1246C
71D14F65C2F7FA78B27A3178021FAADA0B0D5CF511ECD1587461B88F5173C1FF
2AE3AD6C2F10522891F194F1CB> |-
/M <1C60D8A8C9B5D6EF3EDF823525D67884CFE5E6E2D79F52892B22C59192C6
7F5DEF9E1F59692734C5E28E690694B86BA043552E81597F5C327F556A87519C
201F1435046B041B408282F8CD2F7FADC86A16BFFB3122049E16FCA02A50E3ED
385B618F10E51BF8613B3CAB6E1C4029324276609CF836991DAEBC23DD803866
8A2EC8CA28> |-
/O <1C60D8A8C9B6FF867A6C34F63CFBA483F20348D2DAD0C454E283655C995D
5D5CF5D377DE69CD8137822B1BF27586C2738DBEFFB5BB1B1A732FF2D1463935
01E2A62338C9B42B1491A6EFD4FCFADFB4D3F538B177BA9C6FD9E278A31D958B
A09D74E78DDC> |-
/P <1C60D8A8C9B7D8BE6A7B5A602BBF42770F9BDE491933D5FA4FE426A02D4E
5718C7278054B3664DB7B467D4E48E5F9A61ADDBE2A88D12A0D275033B848284
59EA73F7D60A0030F5C64D35EF7D6A541DCC0C3AE0147A28E28AFC6BF8405DDD
9AB30FDB511D97C9319635251B4D563F605D139B4EBB5BDEEA3D7D7579DDD9A8
E37233BD14AE123F762D22D217B02315FA89FBDB00B1A1133B5C37ADD0E19F1E
4E8150D4437701A3B3B47733> |-
/R <1C60D8A8C9B6079F1E72629575480DC45EFF6E4AB64B66A7652CD7E16EAC
91449245DD3CBA37D2A604CF72E29588675CFDFE01E4A88B3F48C83BCCA7256E
85D1ED04A24E78F3B0E49702EE55B1A71A005E9BFB7D60AD519F80EDCD2ADF5C
0C427374C26DC43CA4BD3A71528CB3166942BEAEF2FD3B0D1F3387D886927B8E
A602B7357C09308F1DBC79BF3317FED3F200041EAB4FF32714D1A7764237CCB5
F518A1E2> |-
/S <1C60D8A8C9B7EF32A40B3F7CFC1EB7E9ED1A9879448E6DF4EAA6E621EE51
7E47285391CFFAB191F3C3BA03401452E59BC25F9E3497798374417C4A14EF12
2C2CAA1114DA8FC0A0D1D558EC4482CC1438E830AB88C11785887BF6F10CA423
D0D695D2834E800725F16D76030FA546B077643DB9B71AF606A8C0D63F39360E
8C11419A3BB5960B3110224661DA080E88EA9BA00998137D89CD24E8CA496A72
DD45E1DBE8DB88BC7D540073C6F33375EFC2786BF4863C1BB8F76B0A79DB18F5
C17A743C7DD53BBCA6A3AA> |-
/T <1C60D8A8C9B64EDF881B97EC50FCD54D95614FAE97315393E038408DEB0F
C34B6632349ABCF295707D380009BD30C7C11FAEB3B0C7AEC827287BACA47306
BA963CDF5360E7104135707DE18EBEBCCE79213152E5DEAA2822B4> |-
/X <1C60D8A8C9B6079F1E72629500FD6CBCE4C38074B7220018926C1C5EC95C
498D2641FD10BB373A4E06107E4E8DF725F1FD64294536342D4F523E5C0E61AA
7AD56F2E4415BED812AF691BB4E52B3B32C4A8A8CB38497F1CE5E264706E2F64
600997739213EE01D85C6E46E844CEB32BDD896F9073F39EA06E85209AECA534
E8831B31CBCB8F1591FC61591EB0CFBC1D1B6CDCA76B3ABC12FD32F5BFCD45E5
48078FD69AA00A73039AB11489> |-
systemdict /gcheck known {setglobal} if end {end} if
end
SMGPAF+Times-Bold /Encoding get
dup 46 /period put
dup 49 /one put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 88 /X put
pop
%ADOEndSubsetFont
/SMGPAF+Times-Bold*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 2{/.notdef}rp /five /.notdef 
/seven 9{/.notdef}rp /A 2{/.notdef}rp /D /E 3{/.notdef}rp /I 
2{/.notdef}rp /L /M /.notdef /O /P /.notdef /R 
/S /T 3{/.notdef}rp /X 167{/.notdef}rp]
SMGPAF+Times-Bold nf
SMGPAF+Times-Bold*1 [11.9552 0 0 -11.9552 0 0 ]msf
108.308 250.482 mo
(5.EXAMPLES)
[5.97879 8.96521 7.9754 8.63286 8.63284 11.2869 7.30574 7.9754 7.9754 0 ]xsh
SMGPAF+Times-Bold*1 [10.9589 0 0 -10.9589 0 0 ]msf
-30.3362 277.581 mo
(5.1P)
[5.48055 2.74082 16.4373 0 ]xsh
SMGPAF+Times-Bold*1 [7.9701 0 0 -7.9701 0 0 ]msf
1.01826 277.581 mo
(ITPROPS)
[3.09963 5.31532 4.86887 5.75362 6.19994 4.86887 0 ]xsh
SMGPAF+Times-Bold*1 [10.9589 0 0 -10.9589 0 0 ]msf
38.2946 277.581 mo
(D)sh
SMGPAF+Times-Bold*1 [7.9701 0 0 -7.9701 0 0 ]msf
46.2082 277.581 mo
(ATA)
[5.75362 5.31532 0 ]xsh
%ADOBeginSubsetFont: NBIAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
SMGPAE+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B6B41CC7B7C23F654D8876BCF8210DB8E537449FC21E
454F6BFC6A033D6264FCB9BA5C79C4E7AA7227BD3E1DE864D7864C7B18726524
232E8431D8253A76C435C89541EA478453FEECDF6C9E27B0BB0EE977A12009EF
6F2CDD847AFB437D494D039B0F49232B38E2277C2A8CAC5D1C4F6352623248C1
00A575E3C3A6A5824D0D0713CA3421F744402B75AFFC898E79686E10CC7D5C2F
5C93F81A756FFC15AEA3877E726C38C497DC546B3283280F5FFDD2D1A096C544
EE7DCBE6A55141B2D058A7727D561809ABCC814E7B08A994678E8486E5E8226E
E68BB842C2584BF5C1E0231A52F647B814B3CF8853CC9D613153C972BD44D641
63567FD498C84324779F05A69DA29DFF0309F46A3F18DFB876897072454E50FF
70C99203A28974AA24B2F2AD0BF65FACA902CFE3A0967B21> |-
/parenleft <1C60D8A8C9B81F2C34DD536D1360D89197E7FA43CD15762B1F48
F10FBDCF9BC2C750CDE4A2E91649CF8859E337C2E166D3734F3568F45FDC414D
6EEB6B611B8690C7C03C> |-
/parenright <1C60D8A8C9B81F2C34DD536D5F91D4C3DAE454AEB0D09D2D77A
B7A4947777BB664E613196BC679C0FA303967174C88DFCCFA0D154A8957EC684
FC25A36D2507079F0D08A> |-
/comma <1C60D8A8C9B8707CB516A860815AB2EC26918885F713E4ED7939803E
0A8E0EE12DBD595F7B4FC46C96E99C7C244F8EE37F7C691D6FF966A57DBB357A
175F54A977790792A86A701245F8E3A81974A3254E3CFE0117AA8FEF> |-
/hyphen <1C60D8A8C9B81F2C3AED63678C15FF4B0D41EAF1ADF08534F78C6CF
D85> |-
/period <1C60D8A8C9B8707CABA78EB744DAD228E94EA6790A3CF5471A14CA1
EC74457D34EB30A52B7D5CE690F230DA3> |-
/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A7463788209D
FA6F2469A76A662ABDEC36022D07150EBCCB00EAFC3634E253FB48B765FB94D7
1E293B85E25BD0A9620E2BFB3082EA4BB23F9236A4694D2C3E9FC45E251B722> |-
/one <1C60D8A8C9B7A73DC549024B406C76DEED7B46C1EF6EB5651B1F268C37
87648C40DBF41CCAF519D06A13A3171180A36B4BF986E9264F6C74AFB62268E9
5BF4B0184D270E> |-
/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B7460B
BC2BE41737489572FD61CF5BD3DA796B955EB550353EDF2F8C07B4F538413169
7035B0D3184C9331276BD170AD13B7E6187EA056B38F406A362F0A077FD8459E
E186F67C0C> |-
/three <1C60D8A8C9B7A73D33B7A780A4FB6D47887A89CCD14262CC5EAF9A44
E4667C02E08E12C9FAA81B3FDF7544E6E75E5296452BF3839C72DB687B09DBAE
283E004770052C2C40F3BE9D14CD88A743EF8BCC90D61B07BC93A5F254687A35
8EFD7C6A34DA02B99630F8F91E5B5B18682C41B5E27DFA84375DC950157D776B
EF8B8244DE2CBD755506> |-
/five <1C60D8A8C9B7A73D33A88FEA12959A734F76D056A6AD18616787F24D4
694B06D2D404FC3FCA38087EA8162B81AF2DD5F722A8A8620829370F42A0D36A
D232CF1AF8C5768FCC5070E4C1D383794DEEE463936008AA8B79C75171B0B56A
EE44FCABBD4B348C68E82A7216D83E5CCC6E39493B5E64C831AA2> |-
/six <1C60D8A8C9B7A73D33BF1B90A184398C344468AF20F393E1CDAE1A1BDF
4B1EF29581C243D118AD9C2F9F3B85C649B4F94D8775B8245D414436A3846937
1891286E3E4F3F2C58114BE7041C63E1137F930DD38393462B124AC8D60E4109
AAD485EEDD44016B3DCF2F116B050BDED76293F395802A2102> |-
/seven <1C60D8A8C9B7A73DD6FE362CD24F05334B0EB647AEFE5409105064A3
E2149E3F071B4B7682CB4AAE846128CC40E4FE81E9AE8C264167A3B3D819A723> |-
/eight <1C60D8A8C9B7A73D33BF1B919D3990280983708D6757A992F5763D40
D0C17EA83BCB85789813648C1332AA4BA5DECDB6C51AC02F13C5CEC3648068DF
163FD5A16CBA724ABBC388395CA8D29C7E9CBEAA9260DD0185441D7B1077F46D
B8D59436936512EF03987B35CAAC3F83CBCFD25406E86BFCA5DD2BD7BAF4B5A6
E1EF7535E35954911D554DFEA44E42DB79B0FB04D3E90477795F66F8A8FEB792
F15D59414AE3673345D8ABA5BD4D2AD8EE578BFD9E28ECEFDCBE7E7D857182A9
F46443C79272F5FFF983387F498DC0041982F82C8B0FA76BA464F5DD7119CCD6
2BCFB1365FA28B858FC14D73B10CF5A83F8B> |-
/nine <1C60D8A8C9B7A73DD0C741EDEE83FA306ACFF34B0F4BCBA36C21A7408
C6F9BEB4A442B2F13237BF635FDFAB907B29059292DDAFF5DABCEDC6EC41C5F3
C648AFBF12E0ECD4E60C870F065877946C9D47E8B9420F50B2720233BC04950F
88E0C085E4CFFDC37232A1913DAF7D116A465520E3E0185527DFA5DEE32> |-
/F <1C60D8A8C9B7EF32570E39CCED07FE54E8B5118F3EFF07C7A79A2805F3A0
A62B533927739BBD16C0FFD3AC5F7937BA6A77D95364929C45CCB36D43768248
BB4CA07335B05089C3054F8266267EA81FD1968E342067FDB1C18CAE3BA134F0
CFE97722A134B258723887B6348E563CA90DD50FCFD86BBD6D86A70BD9FA04FE
D5C28095E9CAE9129CC5DD43CEB35A25AF3CFF0C1B8081DE66> |-
/H <1C60D8A8C9B6079F1E4884809AF27C32C4C4644B748B72386090B6EA72F2
CAD492799B13A490C22BB769448B5BE5145154E5257C346442332292571F1722
B637B36F195964360C86F3C2FA20D5968E5EF117A87C5275E3CF4EDCBA851C9A
2685EF777C52F37A9D6571C1FF8201E097F935E15B632A692C95A8A199E69FDF
3449B5C7E7D9F966187E> |-
/J <1C60D8A8C9B7361F880F413C1C9D6C86FEA00697E36B5763F3D7FD9A1E23
CF6677220319B360476BBC0170DA873D0E3D0C5A5B405FDB02B95D7F889A75BA
4F9D51BA63901883BA51239D3D6001E60146B80BC705A3D1608F> |-
/U <1C60D8A8C9B6079FE80F64D637F1516D9E8985E20DE1E4A504B71DC250CC
94F8454FA963469B35C9D4B7E46C018A2F3902FA466C96536C754E001D7B60F1
C628148C766518D0DC4CFB4FCBBE135C4BE555811EB0F5DE32774AE040CA6449
20E9C9E4CEC38A967DCB11773942911928CF14258BA4> |-
/a <1C60D8A8C9B77FE2B8A4D222FB41F47F459CA0D95123D06ECF654AB05FF5
B6DC144FC9BBEC366E5ECC063C78F59640CE32DD9D219C4F4385FAEDBC60FF33
4CB1D3BF02D9F353F73914E29D9DD64FAA28B45E23265BD78A90B345EFEAD972
A0D93CE817026DBF17DB9E8E49AD8C2AF4FC6486D49F260206F186E614E3D16B
2F4AD46463A28F92ED5F2851044761192B9ADCF8B12C73A96A7E57C5841BD16A
930132DACDF469EE0C2A8F85A167570E289B5609FF9CB20DD38C9C84A9BB9FC8
A7014AC491483F6C> |-
/b <1C60D8A8C9B7A73DCF483CC3D064C5FA3DCB4FE14F64E061FC6B7B327BD3
AD170E4E134821E89959D7FC86E9160C1887FE9D1E5C6528E6DF501B7B2F3F30
D0CEE6E0ECDE5FBEA2BBABC11DF1E31664808113184F8240E66E326CF8F60725
DAFAA94AA48A85FA298CB9ED7FFADEF21D27A3E79BDB2F75A75EA736FD59CC65
59DB85761C885E021EFCF09E24B9> |-
/c <1C60D8A8C9B77FE2B8B3EAC4BBDE029BAC315D1866DD79216DBC0D30C20B
16F949C4DACB51911E080D5D4FADB2A127C4AB23B312E9F44F985AA21BA1A9B7
1EA7AE21C439E05A319047A6D64BC1D4392480160430400AFA5C943510A8521B
80B0990CB49D8F01EE3F> |-
/d <1C60D8A8C9B7A73DCF5C5F7CCFE1224745C14DED045144DECBED335D8767
365A686119923BC683874F138A812E24882366A564440105A4DC036664F6BE73
6287F87B295D2920E5B8EA5128E5E6C4D3D8CC4EF499D5F82793394C8A44BB4B
C5B324694DE039E82E3C3E95CCEA761C759B9AB2F813EF75023CD818EA7E49BF
A40067FB96C397B29CD7920172CF32CEB2D7D6BA2C2C243F80C59229B326C2E0
18A09BBC01E8E5EAF27058ED024F330852F9551733A92CF8DD2FDE72DD73A6AB
5C5124E5F56317BB270B722C0F9A2DB91EC3> |-
/e <1C60D8A8C9B77FE2B8B0813537CAE403B54DB40537D3BCE3A721EBABA194
412EC3061B00A07EF9497D2BA0393994B5BAD3D53481E4076AC8BDD976CDE1D7
C869C749BF31CD9AA8D8775C17BFBC48988132FD7543B8680B068C59E2A9123C
08B9AC1B> |-
/f <1C60D8A8C9B81F2C46F2EFDEFE0CB59F321E43BFD6E82BCAAF0597468DCF
77C72CE9F4FF44E681C46DF934E6F13477EDB282AE0A0AEB3C1EAE1FE7BD0F6D
E854793C6EBB102BA640EE2A1937B205F1275AE2A18BEEEA6F56A75ACE6F8742
D16A82839984> |-
/g <1C60D8A8C9B7A73DB582976F6FA2EE84F51D64198201D65DA0379D449296
CB33756AB3A7AE8A175ECCFBAEFE2D4D26FE981086B935FAC40322E1F0B8F735
0D4069F2282387985119CD3420DA7C6AF69B6593DDE216B952D8FCDCBEF2F469
E8089D575BA41CC65444D1B22A9D24CFC1E970C8B6BEDF22A18DB852FFB88FE3
E61676AF1B587C8BEDC7F57FDC2C2A66C537084478A0CE11D64537C41EBBD5BF
312EA203B1D25DC925907A26C5096A56920B8D980F1FDE4021D766D9EBB9E2D5
040E1243BA22D72996312BD29C454816BAAC378D28EAD1B4E006AFB191F0E636
14E1C1D12BF3C0816D46C6B4BFA439751F894732123CB9417F879A9079FEB665
894A238DC5E00C5560672D49ED3BE797BB9B40B81D47DC4D6525BAC3E19A2463
521FF7137CAAF2A9FB5F4F7C0D469F6100DFA27CAFCE39CE1E106B3138E3B02A
642CB6CBDE836A606594170908768F9F84598AA082C678AA176A30FCE7778326
054A4DB4C2521DC0835CAFB81BC8AFB272F07932AA37EF69999C6D26587244DB
681D773B8265D77C46AB4A99012FE89850D5F97C81D2ACDC98A50506471087EB
40F5> |-
/h <1C60D8A8C9B7A73DC549024A8346FEB2B78E908B5A6E113B6B1D9F55576F
B6430AA363CC7EA7A85866229D47A648E16050AC3817C69AC198992A95DC887E
9C2F4E126428A388941BC547CF3DFD3AF002591B6C465CE80F6B0C8E3BF1745F
FB044EE609634601B3F272E0A2A1613C8D3DAD607A9DF002A5DBDCD953AE67BA
74F625AAC084AEBD78F5D55004D7E5DC895C1EC4CADD91BABB3BE394835C4CCB
41B4BC3CDD> |-
/i <1C60D8A8C9B854D08887A954377F4C214D4B21F7492A7553FF39CC630E80
1180DD16566EA992053D08DFDDD90B69C61E00DD73FA9F14D9F9BA0BA5DE6F46
3B9913A4C5B8DB11D33C1FDD97C4AED671CB9420D4160C0D8849042FEC7B7C3A
D6164404608E93E91AD41C497AA4F0BFEC99AE40E5> |-
/j <1C60D8A8C9B854D0F8036B9E41E00749D27292159EBFE77AC2277EF54883
34291DD30C4B9C3E7C953150698FE31B2CBE1624AFD85A81A9069F8F47C4285F
33A4C9AD85DA78A27DB5C06356F829273C4740DFB56B8B0FDC43D66AC99A3ABD
AF5532DEF5D91EF8D649F7038A091BBD40D049C74BB965EB68080498527B94AE> |-
/k <1C60D8A8C9B7A73DC549024AEE55A01243B0ED1B2825DB74E3D4409DAB03
360E64EE70A07ED7B69F115EEF98820D21F1DE6EF3BB4358612BA07FC9A40921
C0AD30EF197C3D695EFDC35D3C9730116E52E0ABEFC9769B9302392F123FDEAA
4AA885495C7D34579141F0B531400B42BB4E124EADD24EC34F713FF7466019E5
54EC1582FC6D1F609CBE080383D47963691E73E752C0BDF5CFFA1CA9F764FD81
0298046BFCBC263AE7BCB74C096697F8A00B5877DC20F2A2> |-
/l <1C60D8A8C9B854D08887A955C7D68D8C5333C31878F574AA9AE5E3E7AADB
E1B3A329F6AE772A2FA9E3BCD7AD6B2EB2F08C5C060E81EC0A70F41E9D6D0E7B
19D3FEF21F30C39B12829A5A4E4EDD48F68C41B6A233A2DBED> |-
/m <1C60D8A8C9B6FF86E3B590DB9FE94810D7AFBFE7B946F15ADC4969344E90
E1A3F6BB0EC423A0839831AD6C986649A08BE59C9A3AF60608A974950B299379
DB00149450A78653D6D4B9B18966FB51AC5B75CCA0334B3300F064709EE52494
90C1CB7C6E6F7A3DBD6837889932B38C16FA553F6A7BD9185FFB7638767BBEB1
CC928CF2A5534FC32F6F3027FAF68DC8EE9A75EC980BD894ADC4F0B26421A336
F0F6A40AAD70D4278736A8FEA511C2ED4A971DB961B998B0AA6DA21448599468
54D246CD2A6E94B7321CC1214550> |-
/n <1C60D8A8C9B7A73DC549024A80DEC09E4F713BEC6C634F1E9284F6FC7263
711D03C47F22A203EB41F88268C104BC4A61C7649DA42D5BE18FE7F731730EB4
D130993D14FEE046DD67E78C9CE5C5598D396AB18A5366D9E71D2D6A292A9108
9ACF40B09098B729C4807DB1C9D54B7EE1602D3D091D4525D3E7868AFA4B4D0D
EB009172C2D67F26ED44CA4931A6533F30AB34> |-
/o <1C60D8A8C9B7A73DCF4402F5174BF7DD0D28D0C5665CB34A93F0BF7A993E
7B76B394E0DD4E0D515EE382B893A080E29B40A4402A4A406056947B5B2334F6
D5909CCB56B0284CEFC066661E9D6B7471673D105428B9DFDD7F> |-
/p <1C60D8A8C9B7A73DB581186A9391F1059D96F459FFDB82B44DD4DA245FA5
07D024F28401075285D307468CE0D757751AAB4F3490756973E462106B10BD76
63199C4B8A27D5695A680192DE86699DAAF1A89717FDB65265476969999FB7D7
847B55845008C66520A977913643311D83941F927D5B958DBE761028866277B0
1C9604CB3013C82C039B9AE8C95A3C2834B9ED8E05831C8156944A7F9B872094
AF1AB63EB96F8DF66A491A85E4F72D480F637D538DE8> |-
/r <1C60D8A8C9B81F2C46F2EFD1B3B81533015C6076AEA2DF2F336244DA608D
0666A9C39147579BE5F84064BA5DCF6CD4C576D0177C42EAE7438D00AB1D6595
6107D443F0AD6F08A63F5306BE8A1920B3CB273D9CF24739F3E4740FB53EC981
D22501D5AF8E600BA9EEBFA742EC328561AB6E257A9B7C3C0B4F8CAC20D46ECD
F05FEB5C54162C09AD2C0169673C> |-
/s <1C60D8A8C9B7361F743FE5C092782516B89C667F24852F2833C914D37274
1C204CB19829CF798EC00B6F60FD56301EF9B4136E1F422FAA9773C81ADFC08A
FD24624819F92289BABB5D2A560D29B4C37B5C72F295B1A8757B2DDC4F96A3A7
A76D5B8850E9D3B3108E173E7C2AC94ED9F5B4EBB2AC4F74997A581EAA1D8190
963213A6DBA3FD99B4DDDF91DEB606EB29DAC3E030DB9A2BEA3B60C98F55A0A9
B8097DA00FD849056413A4E04E950801ED07C405C45837491E4864754EBADCC3
2B5232850305BAEEDA0A345554138E3B49E2F7260D37E80E4C37FED6327D7438
DA6B2E0355D0043D6795C50CA3> |-
/t <1C60D8A8C9B854D082F829CADA24029904B667043F82AAF5798ADB1AF637
87A08D89C04AC22E998B93D82023FC776DB3B03794FD10AD1A9169D67270B70C
C8030C1164B605608F8ED713A3CC4AFDDB0825DD3A8B4DD78D9148075B5FF6> |-
/u <1C60D8A8C9B7A73DE1FEDB846BC597269D9E0C51D8C22F2B722B34AEBAF1
90658C0559601B266D7A25A55FD43DDD5BEFD1643FDA15DB9307B56B392B5AC6
8F81B580F46B71CB6DE1A21AE03B91093587C26F113B0055E84FDB8C5EDADEE6
28F85456B6D1B0C90F3F4C6B66407F7C61F465E76A627C6E1AC486C9BC9506FC
F303D0A507D5D7D5D700213EA098FC6A864FC4203B659E> |-
/v <1C60D8A8C9B7A73DDC2846ECA263567D5FF766DAF6EDECBDA59981A2B8D8
52D5F3C735E0CB09E278E085C85902E93B6730AC94976F06C86CE79902DFE3D6
3F4327D345589E5D6D8E4470DC068DE92C7775CDBCE234CF63D9048B83B5B822
5EB38A3E7FD244643B093F0131528FD6DE23> |-
/w <1C60D8A8C9B6079F073CF9E9FD4DD755103DBBF986FA4805E36E84A4ECDE
5D22075F7DCF210C6B1EBA68713659F633DB777AF20557A55192976916F7539F
BF60FD9581CC24839D0FB84FEDB8D55FB604997EF9376D1DB0C150E41998C0DD
7332B70334BC2A16949E085C7559C48EDDB465613BB3B4A21037C818DEE65F27
4EC082BD0BF16541E3A6DC67D01E45FCE5987C6993A634C7751F403C64619D5D
34EDF98783774454B5C36C735A22C2> |-
/x <1C60D8A8C9B7A73DC5490245197C6A10ADDC3E0FA58392059EC7D8F6B66F
B0930B38EB119ACB6A2A3F634D77F5CF7C8D99C62501D6684A6FD07A49AFAD74
8B3BD4468AD4BA11802E815F7DDC3EFDD84C4D7209BF92B0439CDE5D67632483
66DFBFD06A148E86014B62BD462267E2267FF702B3FE0C2F56259689794C288E
394AE4382AFC6AC04373CAD56E7F81CE52F61834C7721A873F0194632E517E05
6B975C> |-
/y <1C60D8A8C9B7A73DB5828C8EB66C86A2A0178950C8A5D2BCDF7E587CE4AD
01DF8AD4603198C6F5DF9E7F658259AE7FF6DC72080528C2A7D419F982E298CC
AED2E6BCC85E06532CEB363664FB4449960341BAA9D39DAAAF5C47EC79D4FFB0
F446C4E2A0FDC91EAC4399171E6DFD5F8C5B3A9EDD053AD9BFC6A562A7DCD44F
19646282D2DDE100CDBBA0EDB34E355DB469767675AF6D94185E4181FCCDCD20
A6CA572AF5532989> |-
/z <1C60D8A8C9B77FE2B2232EA49D913AB92E7516BF62E6A60F72232006C7F9
8446373826AD224BCC9C0B400B08D08E041AF3C08F73E4C31D308972E0D201EC
DBDD1A879A0BBF62D21C71B2> |-
/fi <1C60D8A8C9B7EF32570AFF8232948072BEC4C50248C1208A69B28B65AAD
BCA92759C919FA1E9FEED9805553A4DA719E642BF818FA1F207BFFFA261F4684
EEDEC74D5FA21E60ACFC86CCDCCAB1F34855657DE53C09E74BC643E809747A44
90D6E2D525AF43CE58C8030D80DD7C648C3036BD5C3D4AD9A69D5D31C9A067EA
77341991BEAF0722208EC7CF6FF370325F44116B8F101A9BC9394B7572AA8CB6
FD53542F5362A92C681DCE3150EDF3158D05182681F9FAFCE92EDE83E3B17EF7
235AE203955993A0D562648749B3CC0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
SMGPAE+Times-Roman /Encoding get
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 70 /F put
dup 72 /H put
dup 74 /J put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 174 /fi put
pop
%ADOEndSubsetFont
/SMGPAE+Times-Roman*1 
[37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two /three /.notdef /five 
/six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C 
/.notdef /E /F /.notdef /H /I /J /.notdef 
/L /M /N /O /P /.notdef /R /S 
/T /U 3{/.notdef}rp /Y 7{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /x /y /z 51{/.notdef}rp 
/fi 81{/.notdef}rp]
SMGPAE+Times-Roman nf
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-12.3363 297.108 mo
(Thepitpropsdata\256rstintroducedbyJeffers\(1967\)has180observationsand13mea-)
[6.08607 4.98031 6.91305 4.9803 2.76861 2.76861 4.9803 3.31647 4.9803 4.98032 6.36517 4.9803 
4.42239 2.7686 6.91306 5.53821 3.31647 3.87454 5.25925 2.76862 4.98029 2.76862 3.31647 4.9803 
4.9803 4.98032 4.42239 4.42239 7.47095 4.98032 7.47095 3.87451 4.42242 3.06741 3.31647 4.42242 
3.31647 6.3652 3.31647 4.98032 4.98032 4.98032 4.98032 5.80713 4.98032 4.42239 6.3652 4.98029 
4.98032 7.47098 4.98032 4.98032 3.87451 4.42242 3.3165 4.73123 4.42239 2.76862 2.76862 4.98032 
4.98032 6.36517 4.42242 4.98032 7.47095 4.98032 7.47095 7.74991 4.42239 4.42242 0 ]xsh
-30.3358 310.657 mo
(suredvariables.Itisaclassicexampleshowingthedif\256cultyofinterpretingprincipalcom-)
[3.87453 4.98031 3.31647 4.4224 7.20396 4.73124 4.4224 3.31647 2.76861 4.42239 4.9803 2.76861 
4.4224 3.87453 4.71332 3.31647 4.99225 2.76862 6.09818 6.64606 4.42239 2.76862 4.42239 3.87453 
3.87453 2.76862 6.64604 4.27296 4.9803 4.42239 7.74991 4.9803 2.7686 6.64606 3.87453 4.98032 
4.73123 7.192 2.76862 4.98032 7.20396 2.76862 4.98032 6.64606 4.98029 2.76862 3.06741 5.53824 
4.42239 4.98032 2.76862 2.76862 7.20395 4.98032 5.54013 2.76862 4.98032 2.76862 4.42242 3.31647 
4.98029 3.31653 4.42236 2.76862 2.76862 4.98035 7.20392 4.98035 3.31647 2.76862 4.98029 4.42242 
2.76862 4.98029 4.42242 4.99225 4.42242 4.98029 7.74994 0 ]xsh
-30.3358 324.206 mo
(ponents.Jeffers\(1967\)triedtointerpretthe\256rstsixPCs.Jolliffe,Trenda\256lov,andUddin)
[4.9803 4.98031 4.9803 4.4224 4.9803 2.76861 3.87453 5.34393 3.87453 4.4224 3.06741 3.31647 
4.42239 3.31647 6.72881 3.31648 4.98029 4.98032 4.9803 4.9803 6.17076 2.7686 3.31647 2.76862 
4.42239 7.83459 2.76959 7.83459 2.76959 4.9803 2.7686 4.42241 3.31647 4.9803 3.31648 4.42239 
5.62289 2.76862 4.9803 7.27669 5.53822 3.31648 3.87453 5.62289 3.87454 2.76862 7.83459 5.53821 
6.64413 3.87454 5.34393 3.87454 4.98032 2.76862 2.76862 2.76862 3.06738 3.31647 4.42242 5.34393 
5.73737 3.31653 4.42236 4.98035 4.98029 4.42242 5.53821 2.76862 4.83087 4.3327 5.34393 4.42242 
4.98035 7.83453 7.19202 4.98035 4.98029 2.76862 0 ]xsh
-30.3358 337.755 mo
(\(2003\)usedtheirSCoTLASSto\256ndthemodi\256edPCs.Table1presentstheresultsof)
[3.31647 4.9803 4.98031 4.9803 4.9803 7.07039 4.9803 3.87453 4.4224 8.73421 2.7686 4.98031 
4.4224 2.7686 7.07039 5.53821 6.64412 4.9803 6.08607 6.08607 7.192 5.53821 9.29112 2.7686 
8.73422 5.53821 4.9803 8.73421 2.7686 4.98032 8.1763 7.74992 4.9803 4.98032 2.76862 5.53821 
4.42239 8.73422 5.53824 6.6441 3.87457 6.24454 5.28909 4.42239 4.98032 2.76862 8.17633 8.73419 
4.98029 3.31647 4.42242 3.87457 4.42236 4.98035 2.76862 7.62842 2.76959 4.98035 8.17627 3.31647 
4.42242 3.87457 4.98029 2.76862 2.76862 7.62842 4.98035 0 ]xsh
-30.3358 351.304 mo
(PCA,whileTable2presentsthemodi\256edPCloadingsascomputedbySCoTLASSandthe)
[5.53821 6.64413 7.192 4.62264 7.192 4.9803 2.76861 2.7686 6.55539 5.28908 4.42239 4.9803 
2.76862 6.55539 7.11328 4.98032 3.31647 4.42239 3.87453 4.42241 4.98029 2.76862 6.00752 2.76961 
4.98029 6.5554 7.74989 4.9803 4.9803 2.76862 5.53819 4.42241 7.1133 5.53822 8.77612 2.76862 
4.9803 4.42241 4.98032 2.76862 4.98032 4.98032 6.00751 4.42242 6.00751 4.42242 4.98032 7.74991 
4.98032 4.98032 2.76862 4.42242 7.11328 4.98029 7.11334 5.53821 6.6441 4.98035 6.08606 6.08612 
7.19202 5.53815 7.67023 4.42242 4.98029 7.11334 2.76862 4.98029 0 ]xsh
-30.3358 364.853 mo
(adjustedvariancecomputedusing\(3.20\).)
[4.4224 4.9803 2.76861 4.9803 3.87453 2.76861 4.42239 7.47096 4.73123 4.42239 3.31648 2.7686 
4.4224 4.9803 4.4224 6.91304 4.42239 4.98032 7.74991 4.98029 4.98032 2.7686 4.42241 7.47095 
4.98029 3.87454 2.7686 4.9803 7.47095 3.31648 4.9803 2.48965 4.9803 4.9803 3.31647 0 
]xsh
-12.3363 378.402 mo
(Asademonstration,wealsoconsideredthe\256rstsixprincipalcomponents.Sincethis)
[7.192 6.62022 7.16809 4.98031 4.4224 7.7499 4.9803 4.9803 3.87453 2.76862 3.31647 4.42239 
2.76862 2.7686 4.9803 4.9803 5.23634 7.192 7.16811 4.42239 2.7686 3.87453 7.72601 4.42239 
4.98029 4.98032 3.87451 2.76862 4.98032 4.42239 3.31647 4.42239 7.72601 2.76862 4.98032 7.16806 
5.53824 3.31647 3.87454 5.51529 3.87454 2.76862 7.72598 4.98032 3.3165 2.76862 4.98032 4.42239 
2.76862 4.98032 4.42239 5.51532 4.42239 4.98032 7.74991 4.98032 4.98032 4.98032 4.42239 4.98032 
2.76862 3.87454 5.23636 5.53821 2.76862 4.98032 4.42239 7.16812 2.76862 4.98029 2.76862 0 
]xsh
-30.3358 391.951 mo
(isausual)
[2.76861 6.80652 7.35439 4.98031 3.87453 4.9803 4.4224 0 ]xsh
%ADOBeginSubsetFont: NXMBAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NXMBAA+CMMI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1996 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
dup 58 /period put
dup 59 /comma put
dup 110 /n put
dup 112 /p put
dup 116 /t put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/lambda <1C60D8A8C9B7F44A4516FD5182673257BB2AA93B3AFC1C0AB39AFEB
7D4DC9C128E26263CC14C360DCBB92B58BA5CAD00278A7EB45D3C926592F2863
FBBEE111C5ACD19DCA23E0A40DA96F8F4ABEC0CDDEE49A9B2B25B3CF20133C88
B8F97AAD860BD3DFC37E33DC25959CCCFE24EC99A3ADF92C573B758CE73F4E98
8D4> |-
/period <1C60D8A8C9B854D088E8E1B7306BEE53606180C9D8E09A11AAC6162
445F3509DC276AA079959B131> |-
/comma <1C60D8A8C9B854D0F83823896563389F99F93F23FF16CE93B743AB7C
376AC821786AAEDE7270059A6FF1CFEB37235A20C21D908EB2B0616D97378D86
D24E973D8D07D83E6BD6C0E31C021B3C13AA12FA9436B6F6> |-
/n <1C60D8A8C9B7C3C99592073C380D5EB33972B0E7A1F7696CFD3BFCDBA36E
74B12788DB1F09B52B587438F5C7126CC3F9331B76B422CF5A8AE1351C60E606
EB83495A7E7AC22BCE2DA42AD41D6081160917C2F5B6BD7C3770E73D46D56C88
299BC8375DD55451CDC0C2AEA86590B3ECE55E73CC04BF614AD40ADFEF5A5315
1B31EB2C59E722051D420CDBF51B30D11CA3E1657193C164AC9120BFB614F5AE
A848DBC818A0C3FCF0F0359B7F1D3939AB836E6AD13987A21729BD273786DE6F
C094FF3E8516AB064E601211AE3961B3CB7DC9B246C73859A5B8> |-
/p <1C60D8A8C9B7A4C86FCDA79C1DC84C4AFA74132B55E671E0148FC9185DE5
42CF0A71585BAD4258B26C1F3B3A2E96E2299B47ABCAE85DDF05C2C85CF0D91E
C199D9A216FD6F2F14F19B60CB1B4112ACE05EB92C368EF03882B52F49046E97
539157301A93AD30559C80C6870AA7C0DEB8E25FE8985AFA098FB48CA40CFFA6
785FDAD9B7332D11026B2C1CF8013E4BC86108D34D74707ABF9F7854FFBF5020
40358805636031979FE4E12139161B18EADA631F2C81FCE8809A0ED9D6FB3C21
49D46B2BF861977F71ED5B1FB11CF8FC57DF5A9416D165> |-
/t <1C60D8A8C9B80380260085120D6D1E249FB2DE32EFDFC5AEFCC3C1AB362A
B1AC4D945C4142F374B77DC20250C08162AEB69DC4CEC0575EF34A20FF2838C5
6D01A3D40EE49012FD52F036B2ED1BB119E65DE07D10EB5C2DD7F41ED672F45A
F363F4750BF26AF3518256DE17E77936DC9CD6CE44CA5F494C6FB830F5037D06
DCD316E617> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAL+CMMI10 /NXMBAA+CMMI10 findfont ct_VMDictPut
/SMGPAL+CMMI10*1 
[21{/.notdef}rp /lambda 36{/.notdef}rp /period /comma 50{/.notdef}rp /n /.notdef 
/p 3{/.notdef}rp /t 139{/.notdef}rp]
SMGPAL+CMMI10 nf
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
10.5527 391.951 mo
(n)sh
%ADOBeginSubsetFont: FFZAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FFZAAA+CMSY10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1992 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/BaseFontName (CMSY10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 29 /greatermuch put
def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/greatermuch <1C60D8A8C9B5EE31B34ACAC9E88C39EB20DC726E443F076536
2F3A88741C7CC55A00CB77A8E7690780A703746A92C652C84C191D504A73E125
F0AA5948EDB2933D6D2BB5A327D596535276B1F5182053B7D4CFB1FF45161F60
56A1878F263DE547BF5C98D8455371ED15AFB8855D36565F8869227973497F71
D64C8B205B3B0611ECDAD303AB45506F67297ACDACCB10AB3EC939> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAM+CMSY10 /FFZAAA+CMSY10 findfont ct_VMDictPut
/SMGPAM+CMSY10*1 
[29{/.notdef}rp /greatermuch 226{/.notdef}rp]
SMGPAM+CMSY10 nf
SMGPAM+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf
20.064 391.951 mo
(\035)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
33.5574 391.951 mo
(p)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
41.5005 391.951 mo
(dataset,weset)
[4.9803 4.42241 2.7686 4.42239 3.87454 4.42239 2.7686 5.42166 7.19199 7.3544 3.87453 4.42241 
0 ]xsh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
103.127 391.951 mo
(\025)sh
%ADOBeginSubsetFont: OQOAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OQOAAA+CMR10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988 - 1994 Blue Sky Research and Y&Y, Inc. (508) 371-3286) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 61 /equal put
def
/FontBBox {-40 -250 1009 969} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B7361F0ED0EA8752539777BEBB9273D40DABBCD23C
A817496382F6B840E6A1C46E658A7FF24A9D166F78212AF4C797827975E02701
CDC72E754F4000DECEE47D430E4D5342BD530D47AAD28508160E8A23665C3BDA
FA73039FCB9EE1AB6A300F016FDD82E5> |-
/parenright <1C60D8A8C9B7361F0ED0EA8752539777A78857B993CC758AF4B
0072B7985470F64120F1034EB48F73B7B659942A90C7AB7260686E937E5258E6
B309A8E598CE40EEFE407AA4D2ED07136A6BD81A0336437FF05EC04649152730
73C8D27D659011926A923EA546CAE8D> |-
/equal <1C60D8A8C9B6FF86F5F7C936DCCEFAB8EDDDE1C4D97CDB55B3C9C87D
7B2BAB4AEAEAC0B654A106A73C0C0E7D9BE088117935915C3B6ED2E10E45916B
408B696BFD54F5ED27BB8E0386045AAF2DF481> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/SMGPAN+CMR10 /OQOAAA+CMR10 findfont ct_VMDictPut
/SMGPAN+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 19{/.notdef}rp /equal 194{/.notdef}rp]
SMGPAN+CMR10 nf
SMGPAN+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
112.47 391.951 mo
(=)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
123.75 391.951 mo
(0.)
[5.04008 0 ]xsh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
134.212 391.951 mo
(\025)sh
SMGPAE+Times-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
140.022 393.446 mo
(1)sh
SMGPAN+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
147.539 391.952 mo
(=\()
[11.2816 0 ]xsh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
162.692 391.952 mo
(0)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
167.732 391.952 mo
(:)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
170.499 391.952 mo
(06)
[4.98032 0 ]xsh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
180.459 391.952 mo
(;)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
184.887 391.952 mo
(0)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
189.927 391.952 mo
(:)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
192.693 391.952 mo
(16)
[4.98032 0 ]xsh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
202.654 391.952 mo
(;)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
207.081 391.952 mo
(0)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
212.122 391.952 mo
(:)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
214.888 391.952 mo
(1)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
219.868 391.952 mo
(;)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
224.296 391.952 mo
(0)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
229.336 391.952 mo
(:)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
232.102 391.952 mo
(5)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
237.083 391.952 mo
(;)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
241.51 391.952 mo
(0)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
246.55 391.952 mo
(:)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
249.317 391.952 mo
(5)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
254.297 391.952 mo
(;)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
258.725 391.952 mo
(0)sh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
263.765 391.952 mo
(:)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
266.531 391.952 mo
(5)sh
SMGPAN+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
271.512 391.952 mo
(\))sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
278.317 391.952 mo
(werechosen)
[7.19202 4.42239 3.31647 7.3544 4.42239 4.98032 4.98029 3.87454 4.42239 0 ]xsh
-30.3393 405.501 mo
(accordingtoFigure2suchthateachsparseapproximationexplainedalmostthesame)
[4.4224 4.4224 4.4224 4.9803 3.31647 4.98031 2.7686 4.98031 9.01017 2.76861 9.01017 5.53821 
2.7686 4.98032 4.98029 3.31648 8.45227 9.01018 3.87453 4.9803 4.42239 9.01018 2.7686 4.98032 
4.42239 6.79947 4.42239 4.42239 4.42242 9.01016 3.87454 4.98032 4.42239 3.3165 3.87454 8.45227 
4.42239 4.98032 4.98032 3.31647 4.98032 4.98032 2.76862 7.74991 4.42242 2.76862 2.76859 4.98032 
9.01019 4.27295 4.98032 4.98032 2.76862 4.42239 2.76862 4.98032 4.42242 9.01016 4.42239 2.76862 
7.74994 4.98029 3.87454 6.7995 2.76862 4.98032 8.45227 3.87451 4.42242 7.74991 0 ]xsh
-30.3393 419.05 mo
(amountofvarianceastheordinaryPCdid.Table3showstheobtainedsparseloadingsand)
[4.4224 7.7499 4.98031 4.9803 4.9803 5.05502 4.98031 5.6019 4.73124 4.42239 3.31648 2.7686 
4.42239 4.9803 4.42241 6.70781 4.42241 6.15996 2.76859 4.98032 6.70781 4.9803 3.31647 4.98032 
2.7686 4.9803 4.42239 3.31647 7.26575 5.53821 8.92953 4.98032 2.76862 4.98032 4.77606 5.28909 
4.42239 4.98032 2.76862 6.70782 7.26572 3.87451 4.98032 4.73123 7.19202 6.15994 2.76862 4.98032 
6.70782 4.98032 4.98029 2.76865 4.42239 2.76862 4.98032 4.42239 7.26572 3.87454 4.98032 4.42242 
3.31647 3.87454 6.70782 2.76862 4.98032 4.42236 4.98032 2.76862 4.98032 4.98032 6.15997 4.42239 
4.98032 0 ]xsh
-30.3393 432.599 mo
(thecorrespondingadjustedvariance.Comparedwiththemodi\256edPCsofSCoTLASS,PCs)
[2.76861 4.9803 6.50957 4.42239 4.98031 3.31647 3.31648 4.42239 3.87453 4.9803 4.98031 4.9803 
4.9803 2.7686 4.9803 7.06747 4.42239 4.98032 2.7686 4.9803 3.87453 2.7686 4.42239 7.06747 
4.73125 4.42241 3.31647 2.7686 4.42241 4.98029 4.42239 4.42242 4.57681 6.64413 4.98029 7.74991 
4.98032 4.42239 3.3165 4.42239 7.06747 7.19202 2.76862 2.76862 7.06747 2.76862 4.98032 6.50955 
7.74991 4.98032 4.98032 2.76862 5.53821 4.42242 7.06747 5.53821 6.64413 5.9617 4.98032 5.40363 
5.53824 6.64413 4.98032 6.08606 6.08609 7.19202 5.53821 5.53824 4.57681 5.53821 6.64413 0 
]xsh
-30.3393 446.148 mo
(bySPCAaccountforalargeramountofvariance\(75.8%vs.69.3%\)withamuchsparser)
[4.9803 7.65228 5.53821 5.53821 6.64413 9.86398 4.42239 4.4224 4.4224 4.9803 4.9803 4.9803 
5.44157 3.31647 4.98032 5.98843 7.09436 2.76961 4.42241 3.13715 4.9803 4.42239 5.98845 4.42239 
7.74991 4.98029 4.98032 4.98032 5.44156 4.98029 5.98846 4.73123 4.42242 3.31647 2.76862 4.42239 
4.98032 4.42242 7.09436 3.3165 4.98032 4.98032 2.48965 4.98032 10.9698 4.98029 3.87454 5.16263 
4.98032 4.98032 2.48965 4.98032 8.29779 5.98843 7.19202 2.76862 2.76862 7.65228 7.09436 7.74994 
4.98029 4.42242 7.65228 3.87454 4.98032 4.42239 3.3165 3.87451 4.42242 0 ]xsh
-30.3393 459.698 mo
(loadingstructure.TheimportantvariablesassociatedwiththesixPCsdonotoverlap,which)
[2.76861 4.9803 4.4224 4.9803 2.76861 4.9803 6.81342 3.87453 2.7686 3.31648 4.9803 4.42239 
2.7686 4.98031 3.31647 4.42239 4.32376 6.08609 4.9803 6.25551 2.76862 7.74991 4.98029 4.98032 
3.31647 2.76862 4.42239 4.9803 4.60271 4.73126 4.42239 3.31647 2.76862 4.42239 4.98029 2.76862 
4.42242 5.70764 4.42242 3.87451 3.87454 4.98032 4.42242 2.76862 4.42239 2.76862 4.42239 6.81345 
7.19202 2.76862 2.76862 6.81342 2.76862 4.98032 6.25552 3.87454 2.76862 6.81342 5.53824 6.64413 
5.70764 4.98032 6.81345 4.98032 4.98029 4.60272 4.83087 4.83087 4.42239 3.3165 2.76859 4.42239 
4.98032 4.32379 7.19202 4.98032 2.76862 4.42239 0 ]xsh
-30.3393 473.247 mo
(furthermakestheinterpretationseasierandclearer.ItisinterestingtonotethatinTable3)
[3.31647 4.9803 3.31648 2.7686 4.9803 4.42241 6.01933 7.7499 4.4224 4.88068 4.42239 6.57739 
2.7686 4.9803 7.12524 2.76962 4.98029 2.76862 4.42239 3.31647 4.98032 3.31647 4.42239 2.76862 
4.42239 2.76862 2.76859 4.98032 4.9803 6.57738 4.42239 4.42242 3.87451 2.76862 4.42239 6.01932 
4.42242 4.98032 7.68314 4.42242 2.76862 4.42239 4.42242 3.31647 4.42242 2.76852 5.1925 3.3165 
5.47147 2.76959 6.57739 2.76959 4.98032 2.76862 4.42239 3.3165 4.42239 3.87454 2.76862 2.76862 
4.98032 7.68317 2.76959 7.68317 4.98032 4.98032 2.76862 7.12524 2.76959 4.98032 4.42242 5.47144 
2.76862 7.68314 5.28906 4.42242 4.98032 2.76862 7.12521 0 ]xsh
-30.3393 486.796 mo
(eventhoughthevariancedoesnotstrictlymonotonouslydecrease,theadjustedvariance)
[4.17333 4.83087 4.42239 8.21317 2.76861 4.9803 4.9803 4.98031 4.9803 8.21317 2.7686 4.9803 
7.65527 4.73123 4.42239 3.31647 2.76862 4.42239 4.9803 4.42241 7.65526 4.9803 4.9803 4.42241 
7.10739 4.98029 4.98032 6.00146 3.87451 2.76862 3.31647 2.76862 4.42239 2.76862 2.76862 8.21317 
7.74991 4.98032 4.98032 4.98029 2.76862 4.98032 4.98032 4.98032 4.98032 3.87454 2.76862 8.21317 
4.98029 4.42242 4.42239 3.3165 4.42239 4.42242 3.87454 4.42242 5.7225 2.76862 4.98032 7.65524 
4.42242 4.98032 2.76862 4.98032 3.87451 2.76862 4.42242 8.2132 4.73123 4.42239 3.3165 2.76859 
4.42242 4.98032 4.42239 0 ]xsh
-30.3393 500.345 mo
(followstherightorder.However,Table2showsthatthisisnottrueinSCoTLASS.It)
[3.31647 4.9803 2.76861 2.76861 4.73124 7.192 7.70316 2.76861 4.9803 8.25103 3.31647 2.7686 
4.9803 4.98032 6.59723 4.9803 3.31647 4.9803 4.42239 2.76854 6.31828 7.192 4.73125 7.19199 
4.17334 4.83087 4.42239 2.91797 6.3183 5.28906 4.42239 4.98032 2.76859 8.25104 8.80893 3.87454 
4.98029 4.73123 7.19202 7.70316 2.76862 4.98032 4.42239 6.59723 2.76862 4.98032 2.76862 7.70316 
2.76862 7.70313 4.98032 4.98032 6.59723 2.76862 3.3165 4.98029 8.25104 2.76862 8.8089 5.53824 
6.64413 4.98032 6.08609 6.08606 7.19202 5.53821 5.53824 6.31827 3.3165 0 ]xsh
-30.3393 513.894 mo
(isalsoworthyofmentionthattheentireSPCAcomputationwasdoneinsecondsinR,)
[2.76761 7.30565 4.4214 2.76762 3.87353 8.41142 7.09238 4.97931 3.31548 2.76761 4.97931 8.41143 
4.97932 6.74759 7.7489 4.4214 4.97929 2.76761 2.76761 4.97931 8.41144 2.76959 4.97931 4.42139 
6.19974 2.76761 4.97931 7.85352 4.42139 4.97931 2.76761 2.76761 3.31549 7.85352 5.5372 5.5372 
6.64316 10.6211 4.42142 4.97931 7.7489 4.97931 4.97931 2.76758 4.42142 2.76761 2.76761 4.97931 
8.41141 7.09238 4.42142 7.30563 4.97931 4.97931 4.97931 7.85352 2.76761 8.41141 3.87354 4.42139 
4.42142 4.97931 4.97931 4.97934 7.30563 2.76761 8.41144 6.64313 0 ]xsh
-30.3393 527.443 mo
(whiletheimplementationofSCoTLASSforeach)
[7.192 4.9803 2.76861 2.7686 7.70708 2.7686 4.98031 7.70707 2.76961 7.7499 4.9803 2.76861 
4.42239 7.74989 4.42241 4.9803 2.76862 4.42239 2.76862 2.76859 4.98032 8.26398 4.9803 6.60115 
5.53821 6.64413 4.98029 6.08609 6.08606 7.19202 5.53821 8.82187 3.3165 4.98029 6.60114 4.42242 
4.42239 4.42242 0 ]xsh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.251 527.443 mo
(t)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
182.132 527.443 mo
(wasexpensive\(Jolliffe,Trenda\256lov,)
[7.09238 4.42239 7.15921 4.27295 4.98032 4.98032 4.42239 4.98029 3.87454 2.52054 4.83084 7.70709 
3.31647 3.87451 4.98032 2.76862 2.76859 2.76862 3.06741 3.31647 4.42239 5.77435 5.73737 3.31647 
4.42242 4.98029 4.98029 4.42242 5.53821 2.76862 4.83084 4.33273 0 ]xsh
-30.3394 540.992 mo
(andUddin2003\).OptimizingSCoTLASSoverseveralvaluesof)
[4.4224 4.9803 7.27071 7.192 4.98031 4.9803 2.7686 7.27071 4.9803 4.98031 4.9803 4.98031 
3.31647 4.78105 7.192 4.9803 2.76862 2.76859 7.74991 2.76862 4.42239 2.7686 4.9803 7.27071 
5.53821 6.64413 4.9803 6.08607 6.08607 7.192 5.53821 7.8286 4.83086 4.83086 4.42241 5.60788 
3.87456 4.17331 4.83084 4.42242 3.31647 4.42242 5.06 4.73126 4.42239 2.76862 4.98032 4.42239 
6.16592 4.98035 0 ]xsh
SMGPAL+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
226.987 540.992 mo
(t)sh
SMGPAE+Times-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
232.875 540.992 mo
(isanevenmoredif\256cult)
[2.76862 6.16592 4.42239 7.27069 4.17334 4.83087 4.42239 7.27072 7.74991 4.98029 3.3165 6.71378 
4.98032 2.76859 3.06741 5.53821 4.42239 4.98032 2.76862 0 ]xsh
-30.3393 554.541 mo
(computationalchallenge.)
[4.4224 4.9803 7.74991 4.98031 4.9803 2.76861 4.4224 2.7686 2.76861 4.98031 4.9803 4.42239 
5.26025 4.42239 4.98032 4.42239 2.7686 2.7686 4.42239 4.98032 4.98029 4.42241 0 ]xsh
-12.3399 568.091 mo
(Althoughtheinformalthresholdingmethod,whichwehenceforthrefertoassimple)
[7.192 2.76861 2.7686 4.9803 4.98031 4.98031 4.9803 8.10358 2.76861 4.98029 7.54568 2.76961 
4.9803 3.31647 4.98032 3.31647 7.74991 4.42239 5.89188 2.76862 4.98029 3.31648 4.42241 3.87451 
4.98032 4.98029 2.76862 4.98029 2.76862 4.98032 8.10358 7.74991 4.42239 2.76859 4.98032 4.98032 
4.98032 5.61295 7.19199 4.98032 2.76862 4.42242 8.10358 7.19202 7.54565 4.98032 4.42242 4.98029 
4.42242 4.42239 3.3165 4.98032 3.3165 2.76862 8.10358 3.31647 4.42242 3.31647 4.42242 6.43976 
2.76859 8.10361 4.42239 6.9978 3.87454 2.76862 7.74991 4.98032 2.76862 0 ]xsh
gsave
-94.8543 652.754 mo
517.146 652.754 li
517.146 -139.246 li
-94.8543 -139.246 li
cp
clp
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3213555865000000cc000000606376
7420fe30def00000012c000007da6670676dc3a61d010000090800000631
676c7966c0654f9a000094780009235268656164de49adde00000f3c0000
00366868656112ef167c00000f7400000024686d7478be8c30e200000f98
0000355c6c6f636140b6bf44000044f4000035606d617870142b06ad0000
7a54000000206e616d658855476200007a7400000aba7072657039e6c80d
0000853000000f4567646972000000000000000000000000000303350190
00050008059a053300000125059a0533000003a000660212010502020603
050405020304e0002affc00078410000000900000000544d432000400020
fffc058cfe460133072101bb400001ffffff00000394054c000000200004
058e0000054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000000ad000000ad0000000000250096009f
002400f0013100c200c0004a00a6004100500094004700cf00af000e0079
01cb00040023004400a80025011f0002004600170105009900d9005c0072
00e500e00028004b00de011200240045007000160039ffe90016004b0088
ffb900d9000a004300ae00ba016c0153002f00430048022c012b0025008f
ffc000170028ffcdffd80025009d00e50124ffb10048009d00e600110027
007f00910012006a00cafffc00000024006200a7017c01e900210060008b
0434048aff6b003b00b500d5014bff6b004d007905d809b5006c009100a3
011701c0ffdfffe700be04010065007f00820088009900b200c0022e0343
05a000200026003d004e00610065007b00d9011301310340ff27ff42ff99
004e00a700f2022b02c603070011002b0049005f008d00a100af00d600e4
00f5010b0135019d01ab01ab01d101ee05d80000004b0075007a0080009d
00a600a700ac00b9013101310217021700020017002900550080008f00a5
00b200b300d0014b015901c001c103a50530fe3fff14ff15ffe7ffff002a
00580099009f00c100e400f40130015901ab01ab03220374041e04740532
fd81004d0064009c00d000d100d600de00e500f500f8012a012a01e1027e
027fff57ffa8ffe500000008001f00380051005a006f0076007700a200c0
00c200c400f101fb0209027e02cf04c5057a05f0ff92001200260042004b
004f005100530064008b00ae00b200b800b800d600f50111012001310138
014e01520167018f019601b801d901d902060221027102ea03b003cb03dc
04360505ff3a00120016001e001f002300570068006c007e0088009200a5
00a800c500c901150126012d013001d601d901f6023b0244024402a302cf
02de0385038f04fc0586fee0feebfefbff8a0007004400470058007500aa
00e400ef011601200129016a017301e3027e029002b4030e031003230335
0341035403590388039403c803ce047204ab04da0549056105ab0761fe6e
fed1ff4bff84000000010006001e0027002c0034003700620066006a006b
006c007000700072007c0081008a008e0091009200a000ab00b800bf00c9
00d500dd00ec00f40100012101300169016a016d017c0185018e018e0199
01ac01c101c501c901e101f601f601f60222022202280236023f02430246
026702850285029402d002d602e8031c0363037f03800380039e03b603d9
0400040404ff053205320548058b05a706cb07280748076208ccfcedfd2a
fd59fddefe00fe1afe5bfe96fec1fee7ff56ff7900010025002d002e007c
00870091009900a100a500a500aa00af00b600c600cc00d700dd00ec00f2
01020105011701180123012a012c0131013f014701490149014d01510151
015501550157015a015a0161016201680168017f0180018201830184018d
0195019501950198019901a501a901b601b601b701ba01ba01d501df01e6
01ea01f2020002000203021702250227022f0239024302430247024f0252
02520267026f026f027002720276027e02a702b302b902d603130325032d
03610371039903ae03c203d403f90402042c042f043c04560467048304cf
04d104d804fb051f05450568059e05c2061b06340655066a069806af06e8
06fc070607500762077c07d407ff082500ad00c700aa00b5000000000000
000000000000002f06cf01730514047802df009c00180370058701550025
00060254036c038e03d2056601f0032001da018a0369036bffa3034602f8
036f015602bf0122031f053a0366008c00ff01ab02e102f402e704150154
02e90128049101b7026f034302060000000005d30415048305e8000002d7
003a027d01c002c503830383ffbd003a059e01df059e02d1002004e00213
00df01c001870297000000ce0269028b0058043405fb0069015a01a90578
0182013e0288012a03d4049e00e5032302f301f00196007a00cd014a0424
025e023901ab00cf00fd011e00ed017100700195004001bb01dd01b80001
01a803a7014c020c018d01b0020d0137010000cd032101d4030a00590000
000001260215015002f0025503bc06d00335010100d000d2007a01030130
007c000000000000000000fe006e006600940227002b0045004d00d30132
00180097004100f4febcffe9001605d8058b009100a1032c00520030005d
02cb003a009200e500e500580086003200ba0099008800300298007cff80
01640028004d0065000200b8016a002f010b001100170100007f00040016
022200a6005f000000f8000a00ca0043004b01ee0077012000f401c00028
045f0000008c044500c20060007b008b008b0064005d00c2009c009206b5
05d3004f011700000420fe9e00cc00dc005e004600e30032001a003c0091
005a00a1042c0041002000490071009c009cfe4800400040008600cb0102
007d003a003e006a0050044800290096ff6a0097006900e0004c001b00c9
0069ff970043ffbd0052ff83ff8b005fffa1ff5c00670053ffa8002a0076
ffb20036008705590256052b043400de00c901c4004800db018b00b30048
00da01160125011800ea00ea00ae0000003e05bb008a04d70053003fff8c
ffd500150028002200990062004a00e4006d00ee00e5004803c00033fe4e
02b1ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a50705
00ab0080001e05a50025008b04660230006900290016012f0080005c059f
000040425554403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a29
2827262524232221201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a
090807060504030201002c4523466020b02660b004262348482d2c452346
236120b02661b004262348482d2c45234660b0206120b04660b004262348
482d2c4523462361b0206020b02661b02061b004262348482d2c45234660
b0406120b06660b004262348482d2c4523462361b0406020b02661b04061
b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a5158
2320b08d44235920b0ed51582320b04d44235920b09051582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b017
2370b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b003
25456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d
2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20
b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb017
2344b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb017
2344b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb017
2344b0177ae41b21b0177ae45959182d2cb0022546608a46b040618c482d
2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a23
444565234520b00325606a20b009234223688a6a606120b01a8ab0005279
21b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a52
79b31940201945208a54582321b03f1b235961442d2cb110114323430b2d
2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb1
0e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d2c
0120b003252349b04060b0206320b000525823b002253823b00225653800
8a63381b212121212159012d2c4bb06451584569b00943608a103a1b2121
10592d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b00643
0b2d2c3eb02a2a2d2c352d2c76b802b023701020b802b04520b0005058b0
0161593a2f182d2c21210c6423648bb84000622d2c21b08051580c642364
8bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb81555
621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb40001
00000015b00826b00826b00826b008260f10161345683ab001162d2cb400
0100000015b00826b00826b00826b008260f1016134568653ab001162d2c
4b53234b515a5820458a60441b2121592d2c4b545820458a60441b212159
2d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c014b5323
4b515ab00225b00425b006254923451869525a58b00225b00225b0052546
2345696048592121212d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab9035803588a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b2020202436042b12401885458b2022002436042004b014b
5258b2020802436042591bb940000080885458b202040243604259b94000
008063b80100885458b202080243604259b94000010063b80200885458b2
02100243604259b94000020063b80400885458b202400243604259595959
592d2cb0024354584b53234b515a58381b2121591b21212121592d000000
00010000000511ecf99ed9a45f0f3cf50819080000000000a2e31dc20000
0000c8c23397fb74fd8c1000080e00000009000100010000000000010000
0721fe4500571000fb74fadf100000010000000000000000000000000000
0d570639011c00000000020000000200000002aa00e40344008504000025
0400006c06aa00480639004b0171005102aa005402aa002e040000910483
00250200006e02aa005302000091023900030400004a040000f00400002c
040000530400002004000062040000580400004c0400007c040000510239
00b00239008e048300250483002504830025038d005c075e006105c70010
055600220556004a05c7002304e3002a0473002105c7004805c7002302aa
0033031d002a05c7002204e30029071d002205c7ffe505c7004804730022
05c70048055600230473008004e3003e05c7000b05c70012078d001b05c7
000f05c7001304e3001a02aa00a80239000302aa004b03c100250400ffef
02aa0076038d00490400fffb038d004604000044038d004c02aa004f0400
003d0400000d0239003c0239ff63040000110239003d063900110400000c
040000450400fff90400004402aa000d031d006402390014040000020400
001105c7000d0400001b0400000c038d002903d7011b019a00a103d700b1
0454001405c7001005c7000e0556004a04e3002a05c7ffe505c7004805c7
000b038d0049038d0049038d0049038d0049038d0049038d0049038d0046
038d004c038d004c038d004c038d004c0239003c0239003c0239000d0239
00020400000c040000450400004504000045040000450400004504000002
0400000204000002040000020400006503330062040000810400003d0400
009c02cd007003a0fff204000023061400450614004507d7001e02aa00ec
02aa003904640019071dffe805c7004905b4003504640008046400180464
001804000002049c008603f4004005b4002b0696002e0464003e02310000
0235fffa027b001d062500470556004904000027038d005902aa00e40483
002404640053040000020464001e04e5001a0400004004000040080000e6
05c7000e05c7000e05c70048071d004b05c700430400ffee0800ffed038d
0043038d004302aa00b902aa00c10464001703f4002f0400000c05c70013
0156feab0400ffe902aa007702aa007304730019047300170400008b0200
009102aa00c1038d00430800004105c7000e04e3002a05c7001004e3002a
04e3002a02aa003302aa003202aa003202aa003205c7004805c7004805c7
004805c7000b05c7000b05c7000b0239003c02aa003c02aa001602aa0017
02aa003702aa00e902aa009602aa00bb02aa004e02aa001d02aa003c04e3
00160239001e0473007e031d006404e3001a038d0029019a00a105c70023
0400004405c700130400000c047300240400fff904830025048300a50266
0088026600140266002c06000086060000860600002a0400002105c70048
0400003d02aa003304730080031d00640556004a038d00460556004a038d
0046040000260400ffef02aa00ec05c70010038d004905c70010038d0049
05c70023052c004405c7002304e3002a038d004c04e3002a038d004c04e3
00290239003d04e300290340003c04e3002902c0003d05c7ffe50400000c
05c7ffe50400000c05c70048040000450556002302aa000d0556002302aa
000d04730080031d006404e3003e0239001404e3003e036b001305c7000b
0400000205c7000b0400000204e3001a038d002904e3001a038d002904a0
002505c7004c05d900470431005703c50046035c0047045000460337000c
049e00450400ffef049500e40285000207c0002c0800004f040000990800
004f040000990800004f040000980400009807d5016a05c700c004830026
04cd00990483002604d5022204d5010505abffe905ab027e05ab027e05ab
ffe905ab027e05abffe905ab027e05abffe905abffe905abffe905abffe9
05abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905ab
ffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e
05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d5
00920800000007eb013007eb012007eb013007eb012004d500b204d50080
04d5002a082b0198086b01b807550010060000f40600006f0440003a0540
003704c0003f04150040040000250600005505ab002f046b003b04d50003
01c00089035500a206ab003403d5006404d5009202d6008302d6008304d5
00b202d6007005c70010038d00490556004a038d00460556004a038d0046
04e3002a038d004c04e3002a038d004c04e3002a038d004c05c700480400
003d05c700480400003d05c700480400003d05c700230400000d05c70023
0400000d02aa00160239ffde02aa00170239ffdf02aa00330239fffe02aa
00330239003c031d002a0239ff6305c70022040000110400001104e30029
0239003d05c7ffe50400000c059d002603f5000c05c700480400004505c7
0048040000450556002302aa000d04730080031d006404e3003b02390010
05c7000b0400000205c7000b0400000205c7000b0400000205c7000b0400
0002078d001b05c7000d05c700130400000c0239001605c7000f038d0049
071dffe80556004905c7004904000027023900b2078d001b05c7000d078d
001b05c7000d078d001b05c7000d05c700130400000c02aa00b802aaffdb
0400003d04cd005a060000860600002a060000310600002502aa00c302aa
00bb02aa00ec02aaffea05c70010058dff5c0677ff5c034aff5c05c7ffb6
0687ff5c05f2ffb30227ffb105c70010055600220525003204e3002a04e3
001a05c7002302aa003305c7002205cd001c071d002205c7ffe50525004f
05c7004805c700250473002204a8002004e3003e05c7001305c7000f05e7
001805f2003c02aa003205c7001304310057035c0047042f000b02270025
03f6fffa0412006e0389000003500046042f000b03d50051022700250408
001503e10019044a0074039effd3039100460400004503fe0059032b0046
03f6fffa038d00180502001c0544004b0227000003f6fffa0400004503f6
fffa0544004b04e3002a0604003704a000250548004b0473008002aa0033
02aa0032031d002a06fa000d06fa002705ee00360556002505aa001a05c7
002505c70010049800240556002204a000250575001a04e3002a072b0012
0402002b05c7002505c7002505560025056d0012071d002205c7002305c7
004805c70025047300220556004a04e3003e05aa001a0652004c05c7000f
05c700250533fffa081200390812003905a6003606fa0025049800240548
003a083900260556ffee038d00490412004e03c700300348001f0412001a
038d004c05870017032900180448002e0448002e03e3002e03fe000c0510
002e0448002e040000450448002e0400fff9038d0046037f000c0400000c
052f00570400001b0448002e0406001e0629002e0629002e0423000c0560
002d03a6002e036f001b05fa002d03aeffff038d004c03dd00110348001f
036f0046031d00640239003c023900020239ff6305d1000c05c9002d0400
000d03e3002e0400000c0448002e039a002502cf001f0800004107a20010
040a000d000001010000001c0000003200000012000001020000008f0000
008f0000008f00000090000001020000001c000001020000012102d90056
0000008f025400e0000002af0000ff6b023900b003da005f03a4003302af
0021035a004303c5004e023b0043024a004e03d0005803ce004302220043
039e0043037600330374000f040f006403e2004e023200430270002103cd
005f03a2004303a200430386005803dc004303ae003d03ca006903c00043
04e200430400002104750043045d00430444004301ac006b02f9006b0636
0096023bff9d039e0043039e00430374ff5b0374ff5b03a2003304e20043
04e2004304e2004304e2004303da005f03da005f03da005f03a4003302af
0021035a004303c5004e023b00430279000c03ce004302220043039e0043
037600330374000f03e2004e0270002103cd005f03a200430386005803ae
003d03ca006903c0004304e2004304000021023b004303a4003303760033
038600580404000f0000ffdc0000ff250000ffdc0000fe51028d00ab028d
00a002da0043034d007901a8ffba00000046000000460000004600000046
000000480000004600000046000000460435017c0435012e043500b70435
00810435012c043500be043500af043500810435009a043500db04350085
028d00c1043500b3060001000600010002420036060001000435009e0435
0098043500cb060001000600010006000100060001000600010000000046
060001000600010006000100060001000600010006000100060001000600
0100051bffba06000100060001000600010005b5003a05b5003a01f4ffba
01f4ffba060001000600010006000100060001000481003604350036043d
ffba043dffba03e9004a03e9004a067f0014077600140327ffba041effba
067f0014077600140327ffba041effba051b003204b500240300fff70600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000000
003000000046000000460000004000000046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0400001b0800000006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
028d007f028d005d0600010004ee0015034d007901a8000e01d6ffdc01a8
005601d60010037500320375003201a8002d01d60013051b003204b50024
01f4ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4
ffba024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
02b3005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9
004a0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5
ffba06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba
04a7ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a
00360435ffba0327ffba064f0027064f00270224ffba021affba04a70046
04a700460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d
0047040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba
043500450435004501f4ffba01f4ffba024200360300fff7039affba0327
ffba0375003203750032051b003204b50024051b003204b5002401f4ffba
01f4ffba045a004004ce0040045a002604ce0030045a005304ce0041045a
005304ce0041060001000600010000000046000000460600010006000100
060001000000004600000046060001000600010000000048000000460600
010006000100060001000000004600000046000000460000004600000040
000000300600010000000046000000460600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100028d00ca028d00c7
028d00c60600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000100ffba0800ffba1000ffba05c70048043b0045
0635000b045600020000fdcc0000fc140000fd130000fe420000fce00000
fdd40000fe620000fe2b0000fdb70000fc980000fd880000fc080000fcfe
0000feff0000ff030000fe9e041a00a206000088060000140000fe700000
fdd40000fdf60000fd770000fe620000fdbb0000fbd80000fbd80000fb74
0000fcfe0000fc8c0000fc460000fd270000fcb40000fca80000fcae0000
fc440000fe140000fe700000fd910000fc710000fdc30000fe470000fe62
0000fcc30000fde10000fd870000fd4b0000fd970000fd4b0000fc8a0000
fc620000fc090000fbd70239003c05c70010038d004905c70010038d0049
05c70010038d004905c70010038d004905c70010038d004905c70010038d
004905c70010038d004905c70010038d004905c70010038d004905c70010
038d004905c70010038d004905c70010038d004904e3002a038d004c04e3
002a038d004c04e3002a038d004c04e3002a038d004c04e3002a038d004c
04e3002a038d004c04e3002a038d004c04e3002a038d004c02aa00330239
003c02aa00330239003c05c700480400004505c700480400004505c70048
0400004505c700480400004505c700480400004505c700480400004505c7
00480400004505c70048043b004505c70048043b004505c70048043b0045
05c70048043b004505c70048043b004505c7000b0400000205c7000b0400
00020635000b045600020635000b045600020635000b045600020635000b
045600020635000b0456000205c700130400000c05c700130400000c05c7
00130400000c05c70010038d004902aa00330239000605c7004804000045
05c7000b0400000205c7000b0400000205c7000b0400000205c7000b0400
000205c7000b040000020000ff090000ff090000ff090000ff0904a00023
0348001f072b0012058700170556002503e3002e0556002503e3002e05c7
00230448002e05c700130400000205c700130400000205c7000f0400001b
0533fffa0406001e053300250400000d05c7002b038d004c05c700480400
004505b5003a01f4ffba0224ffba021affba04a7004601f4009e01f40010
01f4001b01f4001001f4006b01f4fff90227ffce0000000f01a8fff502aa
00a402aa00a40000000e01a80056000000560000ffcf01a8000f01d6ffbf
01a8fff501d6ffcd01a8001d01d6fff501a8009301d60013037500320375
00320375003203750032051b003204b5002405b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3003202b3003202b3005f02b3
005f02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f
02b3005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
045a002a039a00360435ffba0327ffba064f0027064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba04a7004604a7004604a7004604a70046093e0032
093e00320740ffba0740ffba067f0014077600140327ffba041effba04cf
002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba043500450435004501f4ffba01f4ffba04350045
043500450435004504350045043500450435004501f4ffba01f4ffba0435
0045043500450481003604350036043dffba043dffba024200360300fff7
031a001a031a001a031a001a037500320375003203750032037500320375
003203750032037500320375003203750032037500320375003203750032
03750032037500320375003203750032051bffba04b5ffba051b003204b5
002401f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba
01f4ffba051b003204b50024067f0045067f0045067f0045067f004501a8
00280000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e
08fc003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000
ff9f018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff58
0000ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba045a002a039a00360435ffba0327ffba034d007902b40023
0242003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4
006d067f001407760014022200430000fee702bc000004440043045afff5
04cefff5045a005304ce0041045a005304ce0041045a005304ce0041045a
005304ce0041045a005304ce0041045a005304ce004104350071043500ad
045a000f04ce000f0400fffb061400000498002404000096049800240400
00000556004a0556004a038d004605c70023068500000498004404000044
03c5004604e3002f040200550473ff6d05c7004805c700120629000d0207
fffe02aa002305c70022040000110239002d03e100190688002305c7ff7a
0400000c05c700480766004a05880045053300000400fff9047300240473
006e031d004804a8002002c000040239001404e300000239001404e3003e
05f2003c05c7000b063f00440400000c04e3001a038d00290450002b0450
003f038d0046038d00500400002c0400002a038c0034036000140400fff9
019a00a1023f00a101fe000a02aa00e40aaa002309540023078d00440800
0029071c00290472003d08e4ffe50800ffe50639000c038d004c05c70010
038d00490000ff0905c70010038d0049071dffe80556004905c700480400
000005c700480400003d05c700220400001105c700480400004505c70048
040000450450002b038d00210239ff630aaa002309540023078d004405c7
00480400003d07990023047b002205c7ffe50400000c05c70010038d0049
05c70010038d004904e3002a038d004c04e3002a038d004c02aaffd30239
ffa102aa00330239fffe05c700480400004505c700480400004505560023
02aa000d0556002302aa000d05c7000b0400000205c7000b040000020473
0080031d006404e3003e023900140481004b0329005405c700230400000d
0533002504d400480400004504e3001a038d002905c70010038d004904e3
002a038d004c05c70048040000450000feec05c700480400004505c70048
0400004505c700480400004505c700130400000c038d0004042f0044042f
fff704000096038d0043038d00460400004404000044038d003a0504004c
035c0047035c004004b40040038b004502aaff30040000440400004403a0
004504000011038d00000400000d0400001b0400001b0239002d02270025
02390036023900280239003d0239003d049f003d06390009063900090639
00110400ff300400000c03fa000c04000045050a00450544004b046d0045
02aafff302aafff302aafff302aa000c02aa000d02aa001702aafff303e7
003603e70036031d006402aaff3002aaff30037dff9402aaffe302390014
02390014040000020464006603c200020400001105c7000d0400000c03f1
0004038d002903f70029038d0021038d003c038d005d038d0046038d005d
038d004605c7004803c70030038b004503a000450448002e0239ff7f0400
fff40370003604000044038d005d038d0046066b004406c2004406d30044
0485001403ae001405310014064d004f0487003d047a003d041d001403d9
003c0292001e02920026013effd201bd001e01bd000501bd00050259001e
036d00040260000401c0008902ec008902aa00b902aa00c102aa00b802aa
00f702aa00f701fc001e01fc001e04830027048300250483005304830053
02aa012102aa00ec02aa007602aa012102aa001d02aa007602aa00ec0239
00b6023900b602aa00f702aa00f702aa00a602aa00a602aa00a602aa001d
02aaffef030e002d025800040154001e01b3001e0250000401fc001e0310
00960310009603100096031000960310009602aa006202aa006202aa003c
02aa0017038d004304570096045700960457009604570096045700430457
0043045700430457004304570043031000430457002f0457002f0457002f
0457002f0457002f0310002f045700250457002504570025045700250457
00250310002f0457001a0457001a0457001a0457001a0457001a0310001a
045700420457004204570042045700420457004203100042045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457002f0457002f0457002f0457002f0457002f0310002f0457
002f0457002f0457002f0457002f0457002f0310002f0457002604570026
045700260457002604570026031000260457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
045700420457004204570042045700420310004204570026045700260457
002604570026045700260310002604570023045700230457002304570023
04570023031000230457002f0457002f0457002f0457002f0457002f0310
002f0457004b0457004b0457004b0457004b0457004b0310004b04570096
045700960457009604570096045700420457004204570042045700420457
0042031000420457001a0457001a0457001a0457001a0457001a0310001a
0457002404570024045700240457002404570024031000240457002f0457
002f0457002f0457002f0457002f0310002f0457004e0457004e0457004e
0457004e0457004e0310004e045700960457009604570096045700960000
fee60000febf0000fdee0000fee00000ff940000fee60000ff440000fee3
0000fee50000ffce0000ff660000fee30000fee00000fee00000ff880000
ff880000ff88000000000000ff5b0000ff5d0000ff440000ff5f0000fe87
0000ffec0000ffa40000ff510000ff510000ff510000fec10000fe8a0000
00000000fee60000ff440000ff860000ff650000ff580000ffce0000fe87
0000febb0000fee50000fee60000fee00000fee00000fec10000febf0000
fdee0000fec10000fec10000febf0000fdee0000fe160000feb50000ffa4
0000fe870000ff440000feba0000ff230000ff9a0000fdee0000feb70000
00000000fec20000ff880000fe980000ff820000fe870000fde40000ff66
0000ff440000fec20000fec20000fec20000ff030000ff520000fd1f0000
ffb70000ffcb0000ff530000ff070000ff150000ff770000fef90000fecf
0000ff190000fede0000fed40000fe2a0000ff350000ff5b0000fed90000
fedc02aa00ec02aa007602aa00da0412005103f6000005c70013071f0000
05c700130436004505440000047b000a05c70048040000450556006e035c
001d0473002103930017049b0014039c001405da000a046e000006a00023
0639001104ed0046042b0045054a001e038d001d04560046045600460540
004504a60014059800480412004e03cd001e03160014047b000a0412004e
038d00460239ff6305c70048033d0046033d002804e3002a05c70025038d
004c0448002e0961004805110023055e00140458001e07be0027056b002d
05c7000004b800000843002306ac002d072b00120587001709ab0023077b
002d040200090329000005e700120502001c05c70048040000450682003a
04b600390682003a04b6003908c30048070a0045061a002a0487004509b4
0048065600460000fe3709610048051100230556004a038d004602ac001e
0000fea60000febc0000ff860000ff860000fc2b0000fc4c05c700250448
002e0498002403c3002e047300220400fff9050d0025041f001f0402002b
032900180556002503e3001f064900360496000c06ce002304fc002e0842
00250650002e0556004b038d00460556004a038d004604e3003e037f000c
0660003604d3000c0533fffa0406001e0707000a045f000a0707000a045f
000a02aa0033072b00120587001705560025041f002e056d001203fe000c
05c700230448002e05c700230448002e0533fffa0406001e071d00220510
002e044800dc05c70010038d004905c70010038d0049071dffe805560049
04e3002a038d004c05c7002b038d004c072b0012058700170402002b0329
00180402002b038d002105c700250448002e05c700250448002e05c70048
0400004505c70048040000450548003b036f001b05aa001a0400000c05aa
001a0400000c05aa001a0400000c0533fffa0406001e06fa00250560002d
0498004404000044066e0044062a0044066b006605a5005404970066039f
0054074100120604000c07990023064d002e05c7004803a000450591003e
04d0000c0000ff430000fec90000ff770000ffb00000ff470000ff560000
ff740000fed70000feac000000000000ff520000ff56000000000000feac
0000fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000
ff7f0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae
0000ff8c000001020000ff090000ff090000fee20000fee20000ff8f0000
ff210000ff0905c70010038d0049055600220400fffb055600220400fffb
055600220400fffb0556004a038d004605c700230400004405c700230400
004405c700230400004405c700230400004405c700230400004404e3002a
038d004c04e3002a038d004c04e3002a038d004c04e3002a038d004c04e3
002a038d004c0473002102aa004f05c700480400003d05c700230400000d
05c700230400000d05c700230400000d05c700230400000d05c700230400
000d02aa001b0239ffea02aa00330239000205c700220400001105c70022
0400001105c700220400001104e300290239003d04e300290239ffe904e3
00290239ffe704e300290239000f071d002206390011071d002206390011
071d00220639001105c7ffe50400000c05c7ffe50400000c05c7ffe50400
000c05c7ffe50400000c05c700480400004505c700480400004505c70048
0400004505c7004804000045047300220400fff9047300220400fff90556
002302aa000d0556002302aa000d0556002302aa000d0556002302aa000d
04730080031d006404730080031d006404730080031d006404730080031d
006004730080031d006404e3003e0239001404e3003e0239001404e3003e
0239fff504e3003e0239001405c7000b0400000205c7000b0400000205c7
000b0400000205c7000b0400000205c7000b0400000205c7001204000011
05c7001204000011078d001b05c7000d078d001b05c7000d05c7000f0400
001b05c7000f0400001b05c700130400000c04e3001a038d002904e3001a
038d002904e3001a038d00290400000d0239ffff05c7000d0400000c038d
004902390016043100570431005704310057043100570431005704310057
043100570431005705c7001005c700100654000006540000065400000654
00000654000006540000035c0047035c0047035c0047035c0047035c0047
035c004705fc000005fc0000073c0000073c0000073c0000073c0000042f
000b042f000b042f000b042f000b042f000b042f000b042f000b042f000b
06e0000006e0000008200000082000000820000008200000082000000820
000002270025022700250227ffaf0227ffaf0227ffff0227ffff0227ffd3
0227ffd303c3000003c30000050300000503000005030000050300000503
000005030000040000450400004504000045040000450400004504000045
065400000654000007f8000007f80000073000000730000003f6fffa03f6
fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa06e00000
082a0000082a0000082a00000544004b0544004b0544004b0544004b0544
004b0544004b0544004b0544004b067f0000067f000007fb000007fb0000
076f0000076f0000076f0000076f00000431005704310057035c0047035c
0047042f000b042f000b0227002502270025040000450400004503f6fffa
03f6fffa0544004b0544004b043100570431005704310057043100570431
005704310057043100570431005705c7001005c700100654000006540000
06540000065400000654000006540000042f000b042f000b042f000b042f
000b042f000b042f000b042f000b042f000b06e0000006e0000008200000
08200000082000000820000008200000082000000544004b0544004b0544
004b0544004b0544004b0544004b0544004b0544004b067f0000067f0000
07fb000007fb0000076f0000076f0000076f0000076f0000043100570431
0057043100570431005704310057043100570431005705c7001005c70010
05c7001005c7001005c7001002aa00db02aa00d802aa00db02aa001602aa
0016042f000b042f000b042f000b042f000b042f000b05fc000006130000
06e1000006f7000005c7002302aa002702aa002702aa00160227fff10227
ffd10227fff30227fff30227ffd00227ffd002aa003302aa001603c40000
03da000002aa002702aa002702aa001603f6fffa03f6fffa03f6fffa03f6
fffa03fe005903fe005903f6fffa03f6fffa05c7001305c7001307090000
07330000058c000002aaffea02aaffea02aa00760544004b0544004b0544
004b0544004b0544004b06cd0000062f000006e400000632000005f2003c
02aa00ec02aa00db04ef00460556004a0556004a0639001105c7ffe508d0
0023078d001b05c7002204e3003e080000290400003004c100660000ffcb
0000ffcb0000ffb70000ffb70239002d0239ff630400000f047300220400
00440239003d0400000c0289001404ff001e04ed001e02aa009202aa0092
02aa00d102aa00d102aa009702aa007602aa004e02aa004e02aa00150239
00b002aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a
0000ff7b0000ffa00000fee00000ff230000ff7b0000ff7b0000feb20000
ffa00000ffcb0000ffcb0000ffcb047300240400fff90405000505290005
0556004903b8002d03d300450432002d0432002d038e002d032900180239
003c025f00190451002d038f00230510002e0448002e0400004503d3002d
04550045044d00450455002105c7003e037e0045040000450400004503a6
002e03aeffff03aeffff037f000c044c002d040a002d053d002d0409002d
0400001105c7000d038d002903290018032e0045044f000f0348001f0400
00110448002e03a6002e043a000f03fe000c03600000044e00000318001e
0318001e0370001e02f6001e02f6001e0376001e0386001e0199001e01f9
001e03aa001e02f8001e0452001e03b3001e0387001e0358001e02b0001e
02a7001e0347001e02e6001e03a0001e046e00000230001e0230001e0283
001e031f001e027a001e027d001e020d001e020d001e01ef001e01ef001e
0268001e014f001e0286001e03e9001e0241001e024e001e020c001e024e
001e024e001e027d001e0188001e029f001e0272001e03e9001e025a0005
028d00050242001e021f0005022b001e02ad001e02420005014f001e01d6
001e029f001e025a00050242001e021f0005025e001e02ad001e02420005
05ed00460a66004606130046075b00460541ffba01e9003c045a00110000
ff0d0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e
0000feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039a
ffba0327ffba0506005f0486004304f1004e04a2003304a0000f053b0064
04ec0043052c0021048300250000fe4b0000fe4c0000fe4c0400ffee038d
00430355000701a8ffba01a8ffba01a8ffba01a8ffba0658001509c50047
0400000008000000040000000800000002ab000002000000015500000400
000002000000019a000000ab0000000000000556004a071d00220510002e
0616000206310044062e004405c700100556004a0400008104e3002904e3
003e031d0064038d00290445005d000001020000ff420000fea40000ff3a
0000ffcb03fe000a055600470556004a0556004704a000250348001f0000
ff430000ff6b0000ffae027000580000ff39021affba0250001e0000ff3a
0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a05b5
003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba02b3003202b3003202b3005f
02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba045a
002a039a00360435ffba0327ffba045a002a039a00360435ffba0327ffba
045a002a039a00360435ffba0327ffba064f0027064f00270224ffba021a
ffba064f0027064f00270224ffba021affba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba02b4002302b400230327ffba0327ffba02b4002302b40023
0327ffba0327ffba043500450435004501f4ffba01f4ffba043500450435
004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d0047
040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a0692
003e0692003e043fffba043fffba0400ffa80400004402aa001406390011
0400000c0400ffae02aaffbc02aaffbc031d001e0239ffbd038d00290400
003d0296001e03c50041062100140239002c022700250400fff9044c002d
046400190400fffb0400004402aa004f04c6003d040000110239003d0639
00110400000c0400fff902aa000d031d00640365ff30040000110400001b
038d0029038d0049042f004404000044038d004c035c0047035c0040038d
004c0239003c038d00430384000a04000002038d002102830005020c001e
020c001e024d001e01ef001e01ab001e01abffa60221001e0292001e014f
00150175001e0151001e0151001a018b0000014f001e014f001e022a001e
0395001e03e9001e029fffa4029f001e0293001e024e001e0291001e01b3
001e01b9ff920188001e029f001f0289001e029a001e0253001e025a0005
0231001e0231001e026e001e0220001e0228001e0000fe930000fe930000
ff730000febc023900b00230001e020d001e024e001e02520005020d001e
05c7004805c700100473003c0556004a02aa005304310057043100570431
005704310057043100570431005704310057043100570227ffcd0227ffd1
0227ffd10227ffd10227ffcd0227fff10227ffcd0227fff103f6fffa03f6
fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa0227ffd1
0227ffd10227fff10227fff103f6fffa03f6fffa03f6fffa03f6fffa045a
005304ce004a032e00130556002205c7000b05cd001c04e3002a038d004c
031d002a0239ff63059e004a040000440556002302aa000d05c700130400
000c038d0043038d0046038d00430239003d04a000230348001f05c7000f
0400001b05c7000f0400001b0402005503290042056d001203fe000c0000
fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff350000ff7b
0000feb2070e000503550045038d004304e300290239002d04e3000a0473
002205560023038d00490239000e05c700230400000d05c7002204000011
04e3001a038d002903c60041054600230409002e049e00450000ff3b0000
ff510000ff080000fef90000fea40000fea40239003c059d002605c7ffe5
059d00260000fee00000ff590000feeb0000ff0f0000fee60000ff090000
feed0000fef50000ff0e0000feed0000fdcc05c7004804000044078d001b
05c7000d05b500230000fe9205c9004804c6001107fc001b0697000d0239
00b002f300260171005101710051040000990400009902aa00e402aa00e4
02aa00e402aa003c04e30037000000000000007600000076000000760000
00760000013000000228000003f60000062e0000083a00000a6e00000af2
00000b7600000bf800000dd000000ea000000f3e00000f9800000ff00000
10620000119400001278000014480000162600001738000018c400001a3e
00001b3400001d4800001ece00001f5e0000202c0000214a000021ec0000
231c0000248c0000276e000029f600002d1a00002e9400003006000031d8
0000338800003582000037bc000038de00003a3200003da800003ebe0000
411a00004354000044700000466a000047f200004a9200004d8c00004ee2
000050ea0000536c0000574200005b3a00005da000005eea00005f920000
6014000060be000061a6000061e200006238000066320000687600006ad4
00006da6000071860000740a000078a200007bd200007e88000080ca0000
85340000871000008bda00008f42000091ae0000947a000096d400009904
00009dc80000a01e0000a2c20000a5f00000aa520000aeec0000b1aa0000
b3a60000b49a0000b5080000b5fa0000b6b80000b7080000b73a0000b786
0000b7bc0000b7f80000b82e0000b8780000b8ae0000b8ee0000b9360000
b9760000b9a40000b9da0000ba060000ba3a0000ba760000bab80000baee
0000bb280000bb580000bb900000bbc80000bc040000bc3c0000bc6e0000
bcac0000bce80000bd260000bd600000bd960000bddc0000be200000bf7c
0000c0540000c24a0000c4b40000c71c0000c7780000c8140000c9b00000
ccc80000ceca0000d1360000d18e0000d2240000d3880000d5a40000d748
0000d89c0000d99e0000dada0000dc360000de6c0000dfee0000e1160000
e1f00000e2da0000e4040000e4ea0000e6800000e76e0000e9020000ec6c
0000ee8e0000efea0000f0920000f0ea0000f1b00000f3320000f49a0000
f5480000f5e00000f67c0000f77e0000f7ba0000f7f80000f82e0000fa6e
0000fe020000fe3a0000fe720000ff780000ff9e0001004a000100ec0001
01d0000102e20001032c0001035e000103ba0001052000010584000105e4
0001084800010a7000010d0a00010d5a00010d7c00010e90000111680001
11b0000112040001124200011282000112b2000112e60001133a00011380
000113b2000113e60001141e0001145000011480000114c6000114f60001
1664000116e0000117a2000117de0001185a000118b4000119ce00011aa4
00011b4200011bc000011c2a00011da200011fa800011fe6000120240001
205c000120a60001212a00012270000124b4000124e400012526000126a2
00012896000128dc000129fe00012ab600012bd400012cfa00012ef80001
3088000132760001343a00013474000134b0000134e0000135260001357a
000135b6000135f600013632000136660001390a000139480001398c0001
39ca00013a0c00013a3200013a5800013a9000013d3e00013e6800013e90
00013eb600013eee00013f2c00013f5c00013f90000140be000142620001
4296000142cc000143020001434000014382000143be000143f000014436
0001446c000144a2000144e0000145140001455800014594000145ba0001
45de000146220001486e000148b0000148e20001491a0001494c0001497c
000149b2000149f200014a3200014ad400014c9c00014e2400014f340001
50d60001523a000153240001543000015596000156080001563c00015788
00015aaa00015b5600015c1a00015cc800015d8600015ea200015fba0001
611600016172000162ae0001639400016472000164d000016554000165da
0001661c00016658000166a8000166f8000167480001679a000167fa0001
685a000168bc00016922000169ac00016a1400016a7a00016af000016b66
00016bf400016c6a00016cde00016d6a00016de000016e5a00016ee80001
6f6000016fd600017064000170e80001716c0001722a000172b200017342
000173fc0001748a00017514000175d200017662000176ee000177ac0001
78860001796600017a8800017acc00017b0800017b4600017b8a00017bce
00017ff60001878a00018eb800018ef400018f3200018f7800018fc00001
90060001904c00019134000191bc0001928a0001943600019598000197d0
000198be000199e800019ae200019bfa00019c9800019d1c00019dca0001
9e9800019ef200019fa00001a0220001a08e0001a0c20001a24c0001a3a6
0001a41e0001a46c0001a4ec0001a5500001a5d60001a6120001a6440001
a67a0001a6b80001a6fa0001a7280001a76c0001a79a0001a7d40001a802
0001a83a0001a8680001a8b40001a8fc0001a93c0001a96c0001a9920001
a9c80001a9f80001aa2e0001ac1c0001aed00001af000001af4a0001af7c
0001afc20001aff20001b02c0001b0520001b0760001b0b40001b2560001
b28c0001b2bc0001b4de0001b5040001b5540001b57e0001b5ae0001b6f8
0001b89c0001b8d20001b9080001b93c0001b9800001b9a60001b9d60001
ba060001ba380001bb900001bd7c0001bdac0001bde00001be120001be46
0001be760001bea60001becc0001bef20001bf220001bf560001bf860001
bfb60001c0a40001c0e40001c1240001c1540001c1840001c1b40001c1e4
0001c22e0001c25e0001c28e0001c2be0001c2ee0001c3220001c3560001
c38c0001c3c60001c43c0001c4760001c64e0001c71c0001c9260001cba6
0001cdf40001cffa0001d0740001d10e0001d11e0001d2320001d25e0001
d3e00001d5460001d6080001d6420001d7b60001d7f00001d82c0001d83c
0001d84c0001d9640001d9740001d9840001d9940001d9a40001d9b40001
db1e0001db2e0001db3e0001dcc20001dcd20001ddd80001dde80001def0
0001df000001df100001df200001e08e0001e2480001e27c0001e2ae0001
e2de0001e30e0001e33e0001e36c0001e3a20001e53e0001e6340001e7d4
0001e8fa0001ea2c0001eb2a0001ecd80001ee1a0001ef800001f0860001
f2800001f2900001f3ea0001f5380001f6580001f7dc0001f9680001fafa
0001fb320001fb680001fba00001fbd00001fc000001fc340001fda60001
fdd60001fefc0001ff0c0001ff1c0001ff500001ff60000200c6000202a2
0002043000020460000206400002079e000207ae000208d0000208e00002
098200020ab000020ac000020d6800020f040002107c0002125c000213d6
000214c8000214d8000214e8000214f80002150800021518000215280002
1538000216a200021850000218600002199400021ae400021ccc00021ed8
000220140002218c00022284000222be0002242000022450000224600002
25cc000227680002284e000229c4000229d400022c9c00022dfc00022fdc
0002323200023444000235a8000237f00002399c000239ac00023b0e0002
3b1e00023b2e00023c3800023c4800023e6000023e7000023ffc00024174
000243560002456e000246f0000248e800024a2a00024a6400024c1e0002
4dcc00024e12000250220002505000025192000251a2000251b2000251ee
000251fe000253dc000255f20002583a0002586a00025ad600025c760002
5d1400025df200025e3800025ff6000261800002621e0002638000026448
0002656c000265c20002665c000267480002677c00026822000268780002
6970000269c600026a0600026a4800026a8400026ab600026b0000026b48
00026bd000026dc000026e9600026fa40002707a000271a0000272340002
730200027424000275b00002764a00027704000277b8000278ea000279ce
00027b1c00027bca00027ca400027d9400027f4c00028062000281880002
83400002850a0002864a000286f40002891200028a3400028b5000028c76
00028d9c00028df600028ea600028fde0002901000029056000290a40002
90e800029158000292d60002930400029332000293600002938e000293bc
000293ea00029692000296ca0002971800029756000297a2000298020002
990c0002994000029a4200029a7a00029ab400029afa00029b3e00029b82
00029bb000029d4a00029ef200029f3800029f8e00029fc60002a24e0002
a2820002a2b00002a2de0002a30a0002a33c0002a5860002a5b00002a6cc
0002a77e0002a82a0002a8ac0002a9680002aa800002ab8e0002abc20002
ac480002ada40002ae260002ae700002af7a0002afc20002b0c60002b142
0002b19a0002b21c0002b3080002b41e0002b50c0002b5b60002b6b60002
b7960002b8860002b96e0002ba1e0002baa00002bcfe0002bd280002bd52
0002be0a0002be340002bf760002c07c0002c1660002c1900002c1ba0002
c1e40002c20e0002c2380002c3b80002c3e20002c40c0002c4360002c460
0002c48a0002c4b40002c4de0002c5080002c53c0002c5660002c5900002
c5ba0002c7340002c7440002c85e0002c86e0002c8980002c8c20002c8ec
0002c9160002cabe0002ccce0002cdfc0002ce0c0002cf880002cf980002
d0de0002d2aa0002d3b00002d5300002d6d80002d9040002da660002dc50
0002dd940002dec20002dfb00002dfda0002e0040002e02e0002e0580002
e0820002e0ac0002e0d60002e1000002e12a0002e1540002e17e0002e1a8
0002e1d20002e1fc0002e2260002e4620002e5de0002e7220002e90a0002
ea520002ea7c0002eaa60002ead00002eafa0002eb240002eb4e0002eb78
0002eba20002ebcc0002ebf60002ec200002ec4a0002ec740002ec9e0002
ecc80002ecf20002ed1c0002ed460002ef820002f2c80002f2f20002f31c
0002f3460002f3700002f39a0002f3c40002f3ee0002f4180002f4420002
f46c0002f4960002f4c00002f4ea0002f5140002f53e0002f5680002f592
0002f5bc0002f5e60002f6100002f63a0002f6640002f68e0002f6b80002
f6e20002f70c0002f7360002f7600002f7fa0002f8100002f83a0002fb1a
0002fb2a0002fc440002fd660002fea40002ffe60003018c0003019c0003
02de0003042e0003061e000307f20003090a0003091a0003099c00030a2a
00030b2a00030b3a00030bda00030bea00030d0000030e5400030f840003
0f940003106200031072000311e8000311f80003130c0003131c00031450
000315e6000316a2000316b2000317b00003190a00031996000319a60003
1ad000031c5c00031d1800031d2800031dc000031dd000031e9c00031eac
00031f8400031f940003209c000320ac0003227200032282000323da0003
23ea00032654000326640003285e0003286e000329d8000329e800032ad8
00032ae800032c8000032c9000032dae00032dbe00032efe00032f0e0003
2f1e00032f2e000330a6000330b6000330c6000330d60003322800033378
000334460003352a000336aa0003382e0003392e00033a4200033b860003
3b9600033c8400033d5e00033efa00033f0a000340280003412e00034326
000343360003434600034356000344a0000344b000034568000345780003
4686000346960003478200034792000348b0000348c00003495e0003496e
0003497e00034a6c00034be000034d0c00034e0600034e1600034e260003
4e3600034fd40003518e0003525c0003526c000354cc000357160003599c
00035c0400035e8a00036100000362d00003648a000364b4000364de0003
64ee000364fe00036528000365520003657c0003658c0003659c000365c6
000365f000036600000366100003663a000366640003668e0003669e0003
66ae000366be000366ce000366de000366ee000367180003672800036738
000367620003678c000367b6000367e00003680a000368340003685e0003
6888000368b2000368dc00036906000369300003695a00036984000369ae
000369d800036a0200036a2c00036a5600036a8000036aaa00036ad40003
6afe00036b2800036b5200036b7c00036ba600036bd000036bfa00036c24
00036c4e00036c7800036ca200036ccc00036cf600036d2000036d4a0003
6d7400036d9e00036dc800036df200036e1c00036e4600036e7000036e9a
00036ec400036eee00036f1800036f4200036f6c00036f9600036fc00003
6fea00037014000370b4000370f80003716e00037198000371c2000371ec
00037216000372400003726a00037294000372be000372e8000373120003
733c0003736600037390000373ba000373e40003740e0003743800037462
0003748c000374b6000374e00003750a000375340003755e000375920003
75c6000375fa000377a8000379b800037ba800037db600037e4800037ea2
00037f0c00037fa600038036000380a60003817a000382680003833c0003
842c000384c60003859a00038634000386e200038788000387da00038938
00038986000389d400038a2c00038a8400038ad600038b2800038be40003
8ca000038d3600038dcc00038e6200038efe00038f9a0003903600039048
0003905a0003906c0003907e00039090000390ea0003914a000391e60003
91f80003920a0003921a0003922a0003923c0003924e0003926000039272
000392840003929600039332000393c800039464000394fa000396160003
963c0003966200039688000396b2000396ee0003975c000397a40003981a
0003985a000398c600039902000399660003999e00039a0200039a420003
9a9800039ad800039b4400039b8e00039be600039c1e00039c7000039ca8
00039cfc00039d2a00039d5000039d7a00039db400039de400039e140003
9e6a00039ecc00039f3000039f980003a0000003a0600003a0b20003a10a
0003a1640003a1bc0003a1ec0003a22a0003a2500003a2840003a2ae0003
a2d40003a2fa0003a3200003a35c0003a3b40003a4100003a4720003a4c4
0003a5220003a55a0003a5aa0003a5e60003a6360003a6660003a69e0003
a6ce0003a7020003a7280003a74e0003a77e0003a7ae0003a7d40003a7fa
0003a8240003a8500003a8760003a8b20003a8e20003a9120003a9420003
a9720003a9980003a9d40003aa040003aa440003aa6e0003aa9a0003aacc
0003aaf60003ab220003ab500003ab860003abc40003ac0c0003ac4a0003
ac7a0003acca0003ad040003ad460003ad760003adcc0003adf60003aec2
0003aeec0003afac0003afd60003b08c0003b0b60003b17a0003b26e0003
b39c0003b5040003b6340003b7100003b8340003baf00003bde40003bf94
0003c1c60003c3e80003c6d80003c8840003ca800003ca900003cbf40003
ce620003cfe80003d3dc0003d6f20003d8a00003da940003dbfc0003dc0c
0003dd720003dee60003dff60003e1680003e2420003e2b80003e36e0003
e4140003e5840003e5bc0003e6360003e6f80003e7b20003e81a0003e920
0003ea560003eb340003ec920003ed0c0003ed860003ee4e0003ef080003
efbc0003f0180003f0720003f0ba0003f12a0003f1a60003f1f00003f22a
0003f2700003f2b40003f3060003f3580003f3da0003f45c0003f49e0003
f4de0003f5140003f54a0003f5780003f5a60003f5da0003f60e0003f650
0003f6920003f6ce0003f70a0003f7440003f77e0003f7b00003f7e20003
f8140003f8460003f8800003f8ba0003f8fc0003f93e0003f9800003f9c2
0003fa100003fa5e0003faa00003fae20003fb220003fb620003fb9c0003
fbd60003fc220003fc6e0003fcac0003fcec0003fd320003fd780003fdb4
0003fe0a0003fe460003fe820003fec20003ff020003ff3e0003ff7a0003
ffba0003fffa0004003e00040082000400d600040164000401a6000401e8
00040250000402b8000402ea0004031c000403540004038c000404220004
04b8000405020004054c00040588000405c40004061a00040670000406ba
000407040004075c000407b4000407f4000408340004086c000408a40004
08ee0004093800040976000409b4000409f600040a3800040a8c00040ae0
00040b2600040b6c00040bb200040bf800040c4e00040ca400040cfa0004
0d5000040d9c00040de800040e3400040e8000040ef400040f6800040fdc
000410500004108e000410cc0004110a0004114800041186000411c40004
12080004124c00041298000412e40004134400041390000413ce0004141c
0004152c0004157c000415cc000416040004163c00041692000416e80004
175c000417c000041802000418440004189a000418e80004193400041980
000419c000041a0000041a4800041a9000041afc00041b5600041b8e0004
1bc600041c0600041c4600041d1600041e1200041ed200041fc000042016
0004206c000420be0004211200042176000421da00042230000422860004
22fc00042372000423b4000423f6000424380004247a000424bc000424fe
00042554000425aa000425fc00042650000426d80004275a000427fa0004
289c000428da000429180004295600042992000429d000042a0e00042a4c
00042a8800042b6c00042c5800042d6e00042e8a00042f540004301e0004
311800043212000433100004340e0004352c0004364a0004377000043896
0004399800043a9a00043b2c00043bbe00043bfc00043c3a00043c940004
3cee00043d2600043d5e00043e6e00043e7e00043ec600043f0e00043f66
00043fbe00043ff00004402200044064000440a6000440e00004411a0004
415e000441a20004421a000442940004432400044368000443a80004442a
000444ac000446040004461400044662000446b0000446ec000447280004
476e000447b40004480200044850000448a0000448f00004494c000449a8
00044b1e00044c8600044cbe00044cf800044d4400044d9000044de20004
4e3400044e8600044edc00044f1800044f5400044faa00044ffe00045136
000451d600045224000452640004529e000454340004569c000457600004
58f600045a5400045b2200045cc800045f1c000461540004619a000461cc
000462760004639a000463be000464580004656400046674000467840004
689200046a1800046a4a00046aec00046b1400046b7600046bd800046c3a
00046c9c00046cda00046d1800046d5200046d8c00046db800046e040004
6e3e00046e7800046fd40004712800047138000471f60004732c0004738a
000474a200047630000476d60004781c0004785a00047898000478d00004
79280004795400047996000479fa00047a4200047aa400047b0400047b76
00047bf200047c6e00047cf000047d7c00047e0800047e9200047f120004
7f4c00047f88000480ec000481b6000481e6000482160004838400048520
000485300004864c0004875e0004888a0004899e00048ae600048c660004
8c7600048d9a00048ee40004900600049178000492c20004944e00049596
0004971c000498ea00049a5000049b0000049bcc00049e720004a0a80004
a15a0004a3820004a5580004a6a80004a7a80004a7b80004a8dc0004aa0a
0004ab480004acca0004aede0004b08e0004b27e0004b28e0004b39c0004
b5000004b5ea0004b75e0004b8640004b9ba0004bae60004bc060004bd74
0004bebe0004c0160004c1520004c2ac0004c3f40004c5980004c7220004
c8820004ca080004cbd60004ccc80004cd060004cd5c0004ce040004ce14
0004ce660004cebe0004cf1c0004cf400004cf780004cfc80004cff80004
d0320004d0800004d1ac0004d1d60004d2540004d30c0004d3340004d3b4
0004d3ee0004d42a0004d5d20004d8c40004d9020004d9380004d9760004
d9c40004d9ea0004da100004da580004da9c0004dae20004db2a0004dc18
0004dc3c0004dc680004dca00004dcdc0004dd180004de7e0004dfbc0004
dffe0004e03a0004e0740004e0c20004e1060004e13a0004e1840004e1cc
0004e2120004e2460004e27e0004e2b60004e2ee0004e34e0004e3940004
e3dc0004e4100004e44a0004e4900004e4d40004e5120004e5480004e560
0004e5a80004e5dc0004e62c0004e65e0004e6940004e8040004ea160004
eb700004eca60004ecdc0004ed300004ee660004f0460004f1980004f278
0004f39c0004f3d00004f4020004f5e40004f7900004f7ba0004f8300004
f9740004f99c0004fa140004fa480004fa7c0004faa40004fb180004fb50
0004fb8a0004fd320004fe760004ffd40005011a00050252000503ca0005
051800050670000507b00005097800050aea00050c5000050e3400050f54
000510720005120a00051346000514840005165400051850000519860005
1ae800051c9600051d9000051da000051e7000051f8e0005207800052176
00052328000524f6000526c4000528ca00052a0400052b3e00052c900005
2ca000052e7a00052f9600053116000531ea000532be000533c8000534a8
000535ba0005368c000537500005392200053af800053d3e00053e5a0005
3fb2000540ae000542120005432a0005444e0005457c0005467c000547a2
000548d800054aa000054bf600054d1000054e960005502e000551620005
531a000554140005552000055622000556fe00055840000558500005597c
00055b1800055b2800055c6200055e4e00055f08000560a2000561da0005
631e000564f200056774000569cc00056bfe00056dfc00056fe600057228
00057492000575ac000577ba0005782c000579a000057b2600057c360005
7d4200057e6200057fb40005814c0005832a000584940005851000058610
000586a20005872e000587ba0005886000058906000589fc00058af20005
8b0200058b1200058bfc00058cea00058d2000058d7800058dce00058e30
00058e5e00058e9a00058ed800058f5800058fb400059052000590f00005
9174000591f800059290000592be0005935a0005940c00059620000596c8
000598f000059aca00059c0600059c3c00059c8000059cc400059d080005
9d3e00059d7000059db200059e0a00059e4e00059f5400059fcc0005a052
0005a0c20005a1240005a1aa0005a20a0005a2740005a2e80005a3580005
a3b60005a45c0005a4f40005a5600005a5ee0005a6480005a6b60005a760
0005a8060005a89c0005a90c0005a98e0005a9f20005aa9e0005ab5c0005
ac080005ac9a0005acf80005ad640005adba0005ae3c0005aeba0005af40
0005afcc0005b0260005b0920005b1020005b1700005b1e00005b2640005
b2f40005b35a0005b3d40005b4500005b4c80005b56e0005b6060005b696
0005b6f40005b7920005b80e0005b8a00005b9440005b9ee0005ba860005
bae20005bb360005bb9e0005bc440005bcee0005bdb80005be5e0005bec0
0005bf180005bf780005c0060005c08c0005c11a0005c17a0005c1de0005
c2480005c2b00005c3180005c3900005c4180005c4ac0005c5180005c580
0005c5e40005c6900005c7500005c7fe0005c88c0005c8ea0005c9560005
c9c60005ca6a0005cb100005cbd40005cc760005ccda0005cd6a0005cddc
0005ce740005cef20005cf6c0005cfd80005d0660005d0c20005d1200005
d1a60005d2220005d28a0005d2ee0005d3420005d3b00005d4180005d496
0005d50c0005d5860005d6060005d6620005d6c80005d72c0005d7cc0005
d86e0005d92c0005d9dc0005da380005dab00005db0e0005db980005dc30
0005dcbe0005dd240005dd820005de100005de820005df1c0005dfb00005
e0200005e0900005e1080005e1660005e1c60005e2400005e29a0005e2fa
0005e3540005e3b00005e4180005e4760005e4a60005e4ee0005e5620005
e5b60005e62e0005e71c0005e7ac0005e8100005e8440005e8920005e90e
0005e9d80005ea680005eae20005eb680005ebe20005ec580005ec920005
ecd00005ed500005edd00005ee060005eeb20005ef6c0005eff60005f07e
0005f10e0005f13a0005f1c40005f2500005f2bc0005f3de0005f45c0005
f4ee0005f56a0005f5ca0005f6180005f6b80005f7140005f7700005f7d8
0005f8440005f8d00005f8fe0005f92a0005f97e0005fa0c0005fa360005
fa5e0005faae0005fafe0005fbb80005fc040005fc420005fcf20005fd66
0005fdd20005fe400005fe7c0005febc0005ff520005ffde000600d00006
012c0006016e000601c20006023e000602b2000603d2000605280006062e
00060698000606f200060a2000060ac200060b3200060b8a00060cd00006
0e0400060ed600060fc0000611040006120a000613360006149000061660
000617540006180c0006194a00061b3000061b8800061bc400061c100006
1d2600061e4a00061f8e00061fe000062012000621360006229200062496
000625c0000626e2000627a8000628ae000629be00062abe00062bee0006
2c8c00062dcc00062f0200063122000633580006348200063588000636dc
0006382c000639d000063b3a00063cb400063e8600063fa6000640c60006
4200000642c20006446a000645a6000646d8000646e8000646f8000647a4
0006485400064884000648d0000649000006494400064b2600064cc40006
4e6e00064fd60006517600065330000654a0000656140006581c000659fa
00065bb200065d9600066006000662b2000664ac0006667a000668460006
69d600066b3400066c7200066d7e00066e860006700a00067174000672f4
000674aa000676040006775e000679a400067b7000067be400067c180006
7c5200067d6e00067e9600067fd600068050000680980006810e00068184
0006836200068576000687580006899400068aca00068bd200068d6e0006
8f0600069050000691b4000693b8000695a40006977a0006995a00069b0e
00069ce200069e1600069f7a0006a1040006a28a0006a3ea0006a5680006
a70a0006a89c0006a9a00006aa8e0006abfa0006ad360006aeb20006b018
0006b1680006b3040006b4680006b59c0006b5ac0006b5e00006b6060006
b7e60006b9840006bab80006bc0e0006bd8e0006bef00006c04a0006c1c4
0006c3440006c4ac0006c6780006c8620006c8e60006c91a0006c93e0006
c98e0006c9ce0006c9de0006c9ee0006ca300006ca580006ca9a0006cad0
0006cb080006cb440006cb860006cbbc0006cd240006cd340006cd680006
cd9c0006cdd40006ce120006ce4e0006ce8a0006cec60006cf020006cf40
0006cf8a0006cfc20006cffa0006d03e0006d08c0006d0e00006d1240006
d1660006d19e0006d1d60006d20e0006d3140006d3240006d4e80006d6de
0006d8c20006da600006dbd60006dd4a0006ded80006e0620006e1fc0006
e3700006e4be0006e5d20006e7340006e8620006e9180006e9ca0006eaa2
0006eb200006ebce0006ec460006ecb60006edc80006ee2a0006eed80006
efbc0006f0200006f0860006f1340006f30c0006f4080006f4880006f4c2
0006f56e0006f5e60006f6b00006f7380006f79c0006f8920006f94e0006
fa080006fa4a0006fac40006fbd00006fc680006fcb40006fd9a0006fe7a
0006ffde0007016e000702820007039600070490000704b8000704e20007
05160007054a0007057000070596000705be000705e40007065c000706b6
000706ea000707300007075a00070786000707ac000707d8000707fe0007
08280007084e000708760007089e0007090a000709320007098e000709b4
000709dc00070a0a00070a3000070a6400070a9600070aca00070b020007
0b3a00070b6e00070ba200070bd000070bfa00070c2000070c5800070c90
00070cbe00070cf200070d1800070d3e00070d6400070d8a00070db40007
0e1200070e4600070e8400070eb800070ee200070f0800070f3600070f5c
00070f8600070fd40007102e0007105a00071080000710ac000710d20007
110a0007113e00071172000711a6000711cc000711f20007122c00071260
0007128a000712b0000712d6000712fc0007132200071348000713700007
142600071450000714f00007151800071586000715ae0007160c00071640
0007167c000716bc000716f20007172e0007176000071788000717ae0007
17fa0007183c000718540007187a000718ae000718e00007190800071930
00071966000719ca000719f200071a4c00071a9400071ada00071b0e0007
1b5000071b7600071b9c00071bc200071be800071c0e00071c3400071c5c
00071c8600071cac00071cd200071cf800071d1e00071d4600071e0c0007
1e3600071ea000071ed400071f0800071f4000071f7400071fa800071fdc
000720060007202c0007206000072096000720ce0007210e0007214a0007
218e000721e20007222c00072252000722780007229e000722c4000722ea
000723340007236c000723a4000723f20007242e0007246a000724aa0007
24e80007252600072564000725a2000725e0000726220007265600072694
000726ce000727080007274800072788000727bc000727f00007283e0007
287a000728bc000728fe000729360007296e000729b6000729fe00072a56
00072aae00072b1400072b7a00072bb000072be600072c2000072c5a0007
2c9200072cca00072d1000072d5600072db600072e1600072e6e00072ec6
00072f2000072f7a00072fc20007300a000730440007307e000730bc0007
30fa0007313000073166000731a4000731e20007322a00073272000732ba
00073302000733500007339e000733e000073422000734560007348a0007
34c4000734fe0007353800073572000735d2000736320007366c000736a6
000737040007376200073798000737d80007381000073848000738820007
38bc000738f60007393a000739a200073a0e00073a7a00073ac400073af8
00073b2c00073b6600073ba000073be400073c2800073c6000073c980007
3cde00073d2000073d5800073d9000073de000073e3000073e8000073ed0
00073f0600073f4a00073f8400073fc40007400800074040000740780007
40ae000740f2000741360007416c000741b6000742020007423e0007428c
000742de0007432c0007437a000743c80007441600074466000744ba0007
45000007454e0007459a000745e6000746380007468a000746d000074716
0007475e000747a6000747f20007483e00074886000748ce000749240007
497a000749ec00074a5e00074ac800074b3200074b9e00074c0a00074c64
00074cbe00074d0200074d4600074d9200074dde00074e3200074e860007
4ece00074f1600074f6e00074fc20007500c00075056000750c00007512a
00075194000751fe0007523200075266000752ae000752d40007532a0007
535e000753a2000753d60007540a000754480007548e000754b40007552c
0007557c000755f4000756820007578e000757e200075808000758500007
5888000758d000075924000759a0000759f000075a7600075a9c00075b4c
00075bfe00075d1800075d4a00075d7c00075e0000075e6e00075ea00007
5f0a00075f3e00075f7200075fbc00076026000760d400076182000762ac
000762ea000763260007639c000764020007643e00076474000764aa0007
65100007654400076578000765d60007664a000766a80007676e00076834
0007687c000768da000769000007694e00076982000769c600076a140007
6a7000076ac200076b1c00076b4200076b9a00076c1000076e040007705c
000772280007745600077640000776660007799600077be800077d8a0007
7f9c000780da000782f0000783460007839a000784160007847c0007852c
000785dc000787c40007898400078aee00078bb000078ce000078dac0007
8eac00078fc2000790080007904e00079096000790da000791fc0007923a
000792ac00079338000793c40007942c0007945e0007948e000794be0007
94ee0007953a0007956c000795d40007961600079660000796e600079764
000797aa000797ec00079864000798ae00079914000799420007996e0007
997e0007998e00079aa000079c1e00079db800079ede00079f9c0007a042
0007a1140007a1fa0007a2d60007a37e0007a40a0007a5620007a6420007
a6520007a6620007a6720007a7200007a7d60007a8860007a98a0007aae6
0007abb80007ac380007acbc0007ad740007ad840007ae980007af3a0007
b0040007b0b40007b1ba0007b3140007b3240007b3340007b3440007b41e
0007b5080007b5ec0007b5fc0007b60c0007b61c0007b62c0007b78a0007
b79a0007b8e00007bab00007bc0c0007bd820007be7c0007bf860007c092
0007c1b60007c2c00007c3440007c3d00007c51e0007c5b40007c74a0007
c8560007c94c0007ca280007cb580007cc4e0007cdc40007ce660007cf88
0007d1bc0007d2a60007d3940007d47a0007d5f40007d6fc0007d8180007
d9260007da1e0007daf60007dbd20007dd1c0007ddc00007df3c0007e084
0007e17a0007e2700007e3520007e3d80007e4680007e5940007e6140007
e6d60007e78e0007e8ce0007ea260007ead60007ebd00007ec780007edd4
0007eeca0007efd20007f09e0007f18c0007f2460007f39c0007f48c0007
f52a0007f6840007f7740007f8740007f8d20007f9d80007fa6e0007fb30
0007fbd80007fc180007fdb60007fe620007ff1a00080042000801d00008
02dc00080326000804b60008053e0008055000080580000805b0000805e8
000806200008065600080692000806c8000807040008086c000809000008
09e200080a6600080b4e00080bea00080c5c00080d2400080d6600080e96
00080f4600081030000810680008108e000810c8000811c2000812e00008
13e20008142000081446000814a4000814b4000814c4000814d4000814e4
000814f40008150400081514000815240008153400081544000815540008
15540008162800081766000819ac00081adc00081c4c00081de800081fb0
00082134000821440008220c0008232e0008251e0008260c000826d40008
2716000827ce000828940008292c0008298c00082a8e00082b6200082c56
00082d5600082dfa00082e9200082ee800082f3000082f72000830120008
307200083164000831f200083228000832a20008331a0008336a00083476
0008356c00083616000836400008366a00083694000836be000836fe0008
373e00083776000837ae000837f80008384200083882000838c20008390c
0008395600083996000839d600083a3000083a8a00083ac400083afe0008
3b4200083b8600083bca00083c0e00083c6200083cb600083d0200083d4e
00083d8c00083dd000083e2000083e7000083eca00083f2800083f520008
3f7c00084016000840b0000840f4000841380008424e0008425e000842a6
000842ee0008434000084392000843fc000844500008449c000844fa0008
4584000845e80008462c00084676000846de0008472800084768000847b0
000847ec00084828000848640008489e000848e000084922000849620008
49a2000849ec00084a3600084a8c00084ae400084b3200084b8000084bc2
00084c1000084c5200084c9c00084cde00084d2200084d7e00084dda0008
4e2600084e7200084ebc00084f0600084f4400084f82000850000008507e
000850b8000850f20008518c00085226000852fa000853ce0008542a0008
5486000854fa0008556e000856cc000856dc000857c6000857d60008580c
000858420008587c000858b6000858f20008592e00085974000859ba0008
5b2a00085cce00085e220008602e000861aa0008635a0008649a00086598
0008675e00086892000869e000086b7a00086ca400086dc400086fc20008
7066000871080008728200087380000874dc000876060008774400087836
00087a3600087bb400087c5e00087df400087f16000880a4000881880008
8332000884340008855c0008870c000887dc0008891c00088a3c00088b66
00088c8400088dae00088ee000089016000890fa0008922e0008930e0008
94160008951e000896220008972a000898400008997c00089a5800089b0e
00089bd000089d1400089dfa00089ef000089f6400089fea0008a0b00008
a17e0008a2040008a2ae0008a3420008a4ce0008a61a0008a71a0008a81a
0008a9240008aa1c0008ab500008ad440008adee0008aea80008afa60008
b0e00008b19e0008b2540008b37a0008b4160008b4fa0008b6060008b704
0008b78a0008b82a0008b8ca0008b9c80008ba120008badc0008bbbc0008
bcc80008bdc60008bfb00008c0b40008c2a80008c4420008c5e80008c6fc
0008c7720008c7d20008c8320008c8920008c8f20008c9520008c9b20008
ca120008ca720008cad00008cb2e0008cb8c0008cbea0008cc480008cca6
0008cd040008cd620008cdc20008ce220008ce820008cee20008cf420008
cfa20008d0020008d0620008d0ee0008d17a0008d20a0008d29a0008d32a
0008d3ba0008d44c0008d4de0008d6f20008d8a40008d98c0008db0e0008
dc340008dc440008ddee0008df6e0008e0280008e10c0008e2100008e30a
0008e43c0008e5260008e6bc0008e83e0008e90c0008e9460008e9800008
e9900008ea780008eb660008ed120008ee900008f0480008f2000008f210
0008f2e80008f3cc0008f4a40008f4e60008f52a0008f56c0008f5b00008
f6220008f68e0008f7240008f76a0008f7e20008fa7a0008fb420008fb52
0008fc380008fcf60008fdf80008ff1c000900620009024e000903520009
036200090486000906020009076a000907ec00090876000909f800090ab8
00090b6800090c4400090c9200090d4200090d9200090dc200090e060009
0e4800090e7600090f9a000910b2000911d400091240000912ac0009135c
00091432000914aa0009156200091650000916a600091798000918840009
18f60009190600091916000919260009193600091a6600091a7800091b62
00091c3400091e0200091f6600091fd00009201a0009205a0009209a0009
20ea0009213a000921b20009222a000922a2000922fa0009235200010000
0d5700f2003c009d000700020010002f00560000062504eb0005000200>
<0000003a02be0000000300000000006a00000000000300000001001e006a
0000000300000002000e0088000000030000000300720096000000030000
0004001e006a0000000300000005001800d8000000030000000600220108
00000003000000070076012a00000003000000080030000e000000030000
0009008601a0000000030000000d029a02260001000000000000003504c0
0001000000000001000f04f5000100000000000200070504000100000000
00030039050b0001000000000004000f04f50001000000000005000c052c
0001000000000006001105440001000000000007003b0555000100000000
0008001804c7000100000000000900430590000100000000000d014d05d3
0003000104030002000c072000030001040500020010072c000300010406
0002000c073c000300010407000200100748000300010408000200100758
0003000104090000006a00000003000104090001001e006a000300010409
0002000e00880003000104090003007200960003000104090004001e006a
0003000104090005001800d8000300010409000600220108000300010409
00070076012a00030001040900080030000e0003000104090009008601a0
000300010409000d029a022600030001040a0002000c072000030001040b
00020010076800030001040c0002000c072000030001040e0002000c0778
0003000104100002000e0784000300010413000200120792000300010414
0002000c07200003000104150002001007a40003000104160002000c0720
0003000104190002000e07b400030001041b0002001007c200030001041d
0002000c072000030001041f0002000c07200003000104240002000e07d2
00030001042a0002000e07e000030001042d0002000e07ee00030001080a
0002000c07200003000108160002000c0720000300010c0a0002000c0720
000300010c0c0002000c072000a900200032003000310030002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0054
0069006d006500730020004e0065007700200052006f006d0061006e0052
006500670075006c00610072004d006f006e006f0074007900700065003a
00540069006d006500730020004e0065007700200052006f006d0061006e
00200052006500670075006c00610072003a00560065007200730069006f
006e00200035002e0030003700200028004d006900630072006f0073006f
00660074002900540069006d00650073004e006500770052006f006d0061
006e00500053004d005400540069006d006500730020004e006500770020
0052006f006d0061006e0020006900730020006100200074007200610064
0065006d00610072006b0020006f006600200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e002e004d006f006e006f0074007900700065002000540079
00700065002000440072006100770069006e00670020004f006600660069
006300650020002d0020005300740061006e006c006500790020004d006f
007200690073006f006e002c00200056006900630074006f00720020004c
0061007200640065006e0074002000310039003300320059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e00740020006100730020007000650072006d00690074007400650064
0020006200790020007400680065002000450055004c004100200066006f
00720020007400680065002000700072006f006400750063007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e007400200069007300200069006e0063006c00750064006500640020
0074006f00200064006900730070006c0061007900200061006e00640020
007000720069006e007400200063006f006e00740065006e0074002e0020
00200059006f00750020006d006100790020006f006e006c007900200028
0069002900200065006d0062006500640020007400680069007300200066
006f006e007400200069006e00200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
002000740068006500200065006d00620065006400640069006e00670020
007200650073007400720069006300740069006f006e007300200069006e
0063006c007500640065006400200069006e002000740068006900730020
0066006f006e0074003b00200061006e0064002000280069006900290020
00740065006d0070006f0072006100720069006c007900200064006f0077
006e006c006f006100640020007400680069007300200066006f006e0074
00200074006f002000610020007000720069006e0074006500720020006f
00720020006f00740068006500720020006f007500740070007500740020
00640065007600690063006500200074006f002000680065006c00700020
007000720069006e007400200063006f006e00740065006e0074002ea920
3230313020546865204d6f6e6f7479706520436f72706f726174696f6e2e
20416c6c205269676874732052657365727665642e54696d6573204e6577
20526f6d616e526567756c61724d6f6e6f747970653a54696d6573204e65
7720526f6d616e20526567756c61723a56657273696f6e20352e30372028
4d6963726f736f66742954696d65734e6577526f6d616e50534d5454696d
6573204e657720526f6d616e20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2e4d6f6e6f
7479706520547970652044726177696e67204f6666696365202d20537461
6e6c6579204d6f7269736f6e2c20566963746f72204c617264656e742031
393332596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e2020596f75206d6179206f6e6c792028692920656d626564
207468697320666f6e7420696e20636f6e74656e74206173207065726d69
747465642062792074686520656d62656464696e67207265737472696374
696f6e7320696e636c7564656420696e207468697320666f6e743b20616e
6420286969292074656d706f726172696c7920646f776e6c6f6164207468
697320666f6e7420746f2061207072696e746572206f72206f7468657220
6f75747075742064657669636520746f2068656c70207072696e7420636f
6e74656e742e004e006f0072006d0061006c006f00620079010d0065006a
006e00e9006e006f0072006d0061006c005300740061006e006400610072
0064039a03b103bd03bf03bd03b903ba03ac004e006f0072006d00610061
006c0069004e006f0072006d00e1006c004e006f0072006d0061006c0065
005300740061006e00640061006100720064004e006f0072006d0061006c
006e0079041e0431044b0447043d044b0439004e006f0072006d00e1006c
006e0065004e0061007600610064006e006f0074006801b001a10300006e
00670041007200720075006e007400610000b9005403ecb3032a1f3f4115
03e4006003e9009f03e500df03e50004001003e4001003e5003f03e50070
03e400ff03e40005ffc003e1b345453240b803e1b32b2e3240b803e1b228
2932b9ffc003e1b21a1c32bd03e102ac0027001fffc003dfb2161b32b9ff
c003deb2424232b9ffc003deb2363832b9ffc003deb32a2d32df410a03de
00ef03de000203de03df0028001fffc003dfb3282e32f0410d03df000103
7e000f0101001f00a003dd00b003dd0002004003dab32426329fbf03cc00
0103ca03c90064001fffc003c9b20d1132410a03c703b70012001f03b603
b50064001fffc003b5b30e1132004173038d000100c0038d00d0038d00e0
038d00f0038d0004006f03a7007f03a7008f03a700af03a70004000f03a7
001f03a7002f03a7004f03a7000403ab03ab00ef03a50001000f03a5002f
03a5006f03a5008f03a50004005403aa0001006b03aa000103a8036a0022
001f038c03940015001f038b03930015001f03a40393001a001f03a20394
001e001f03a10393001e001f039f0394001e001f039b0394001a001f039a
0393001e001f039903940016001f039803940016001f03970393001b001f
03960394001b001f03950393001b001f03760375001a001f03740375001a
001f03a00373b21e1f10411e039300200393003003930003002003940030
03940040039400030000039400010383036c001e001f03b1036c0032001f
036d036c0032001fffc0037db2212332b9ffc0037db3171932a0410a037d
00b0037d00c0037d00d0037d0004ffc0037cb2212332b9ffc0037cb31719
32a0412d037c00b0037c00c0037c00d0037c000400300373004003730002
000003730010037300200373000300e0037300f00373000200b0037300c0
037300d003730003008403730090037300a0037300030377036a0029001f
0389036ab2281f40b80367b33940323fbb0366000100400366b3191d328f
bb0366000100400366b3090a3240b80366b3090e3240b80366b3090f323f
bb0365000100400365b3090c3240b80365b31a1d3240b80365b3090e326b
410e0363007b036300020014036300240363003403630044036300040363
b2242f1fba034e006d0800400e1f7f027f037f047f050430440112bf0332
00500800001f0012032d003c080040291f5f3c0137600970098009031009
2009300940095009056f037f038f03031f032f033f034f035f0305b8ffc0
b2073a33b8ffc04047063a33900ba00bb00bc00bd00b05b006c006d006e0
06f0060520063006400650066006700680069006a006099006900702600b
700b800b03100b200b300b400b500b051f0701a041850362000100000362
001003620070036200900362000400f0035f00010020035e0020035f0030
035f0040035e00040000035e0000035f0010035f00d0035e00e0035f0005
0010030f0020030f0030030f00d0030f00e0030f00050000030f0010030f
0050030f0060030f0070030f00d0030f00060000030f0010030f0020030f
0030030f00e0030f00f0030f0006030f00270000030e0030030e000200e0
030e00f0030e0002030e004a00e0030d00f0030d0002030d002700d002fc
0001001002fc002002fc005002fc000300d002fc00e002fc0002000002fc
001002fc002002fc003002fc005002fc006002fc000600e002fc00f002fc
0002002002fc003002fc004002fc000302fc406127c02901b02901a02901
902901403c3f413240223f41321212125f235f255f285fa5046f236f256f
286fa5044f234f254f284fa5043f233f253f283fa5042f232f252f282fa5
041f231f251f281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0
b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32370f413b02af000100
5f02af009f02af00df02af0003001f02af002f02af003f02af006f02af00
0402af02af001f02ad002f02ad003f02ad004f02ad005f02ad000500df02
ad0001000f02ad001f02ad003f02ad005f02ad009f02ad0005005f02ad00
df02ad0002000f02ad001f02ad003f02ad0003004002acb23a334f414a02
ac005f02ac009f02ac0003002f02ac003f02ac0002000f02ac003f02ac00
af02ac000300b002ac00e002ac0002004f02ac005f02ac00a002ac000300
1f02ac002f02ac003f02ac0003000f035a0001000f035a001f035a003f03
5a005f035a0070035a000500cf035700df03570002000f0357001f035700
70035700af03570004035a035a0357035702ad02ad02ac02ac032c400d31
151f001616000000121108104110020c004a000d01a8004a000d0198004a
000d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d27
4a0dbe02280041000d01940041000d0121400b410db4410d4f410d29410d
411002170021000d02150021000d02060021000d01eb0021000d014e0021
000d012c4014210df9210df3210df1210d9d210d71210d3d210d4110021c
001f000d0214001f000d020b001f000d0196001f000d014a001f000d0126
400b1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d001e01
41000d001b0141000d01f2b40f440f0009bb01f20044000d0201b23c291f
b80200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801
fab23c931fbc01f9010f0101001f01f6b224e41f411501f401490401001f
01f301490401001f01f1014900ab001f01f001490067001f01a6003c0125
001f01a4b23c811f411501a3010f019a001f01a200220801001f01a10050
0401001f019f0149019a001f019d01490067001f019cb22c621fb8019bb2
2c791fbc019a002c0101001f0197b22ce41fb80193b22c891fb80192b22c
6c1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f01630025
02ab001f014c010f019a001f01480149006c001f0147b22c891fb80145b2
2c9e1fb80144b22c791fb80143b223311fb80127b23c811fbc0123005001
01001f011fb223e41f4115011d0023019a001f011c00230801001f011b00
250801001f010e010f0401001f010d00220401001f0108b223811fb80106
b425e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00e20149
b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc0
2cb80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c671fad
23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f81
2cbc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f
403cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f
3025b802abb61f2a24e41f2623b80156b21f5537ba023500070175402c07
74076207560751073b0733072d0720071d071c071408120810080e080c08
0a080808060804080208000814b8ffe0402b000001001406100000010006
04000001000410000001001002000001000200000001000002010802004a
00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0382b4bb0
08505b58b101018e59b0382bb00288b801005458b801ffb101018e851bb0
124358b90001012f858d1bb90001017c858d5959014bb0c063004b6220b0
f65323b8010a515ab0052342180016763f183f123e113946443e11394644
3e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b
2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa1d59b032
4b5358b0ff1d594bb04753205c58b90271026f4544b90270026f45445958
b9017a0271455258b90271017a4459594bb04753205c58b9002202704544
b9003c027045445958b901b30022455258b9002201b34459594bb04c5320
5c58b9014900224544b1222245445958b901c20149455258b9014901c244
59594bb06753205c58b9002402714544b90050027145445958b9021e0024
455258b90024021e4459594bb8020153205c58b9010f00224544b1222245
445958b90c00010f455258b9010f0c004459594bb01c53205c58b1252545
44b12c2545445958b13725455258b125374459594bb0ab53205c58b12525
4544b1232545445958b901590025455258b9002501594459594bb8010153
205c58b125254544b1282545445958b902080025455258b9002502084459
592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b01b361dc6463456523456023456560234560b08b766818b0806220
20b164dc4565234520b003266062636820b003266165b0dc236544b06423
4420b161634565234520b003266062636820b003266165b063236544b061
2344b10063455458b163406544b26140614523614459b3a67f434b456523
456023456560234560b089766818b080622020b1437f4565234520b00326
6062636820b003266165b07f236544b043234420b1a64b4565234520b003
266062636820b003266165b04b236544b0a62344b1004b455458b14b4065
44b2a640a645236144594b5242014b5058b108004259435c58b108004259
b3020b0a124358601b2159421610703eb0124358b93b21187e1bba040001
a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b
2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b0
102342b0112342002b001845694445694445694445694473737374737373
7475752b7373747475184569447373742b4bb021534bb046515a58b03cb0
3c45b040604459012b2b2b2b757575757575757543584010bf3ccf3c026f
3c7f3c8f3c9f3caf3c0575755943584012bf22cf22025f226f227f228f22
9f22af2206757559435c58b6403c9f22ef220375592b2b01747474744544
737374747575454473454473744544737475737373737300757575737575
752b2b757575752b752b435841220063032d00010003032d0013032d0023
032d0033032d0053032d000500c3032d00d3032d00e3032d00f3032d0004
0083032d0093032d00a3032d00b3032d0004032d032d4518694474747575
592b4358b900180332b330353238b80332b361663238b80332b3535a3238
b80332b3454e3238b80332b33c413218b80332b23f330a410f0332000100
ba033200ca033200da033200ea033200fa03320005033203324518694474
752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b732b74012b
002b2b017373737474732b2b00732b2b002b2b2b017374732b012b2b012b
2b2b2b2b2b2b2b2b2b2b2b2b2b0001737500737300456944007373017374
2b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b2b000000
00>
[15785 11565 15133 15893 15981 14937 16337 15645 16353 14921 16353 16373 16237
16209 16373 15753 16373 16249 16273 16177 15933 15953 16221 16017 15885 15209
16261 15725 15813 16357 16209 16073 16169 16181 15929 16321 16045 11683 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> TimesNewRomanPSMT AddT42Char 
2 4194 19 <0002004affe803b705680010002400bab2610820b80106b2050515b80106
b20d0d1ab8010f4012091a002640260240266026a026e026042611b8010f
400e5f006f007f008f00a00005001925ba011e010100182b4e10f45d4ded
4e105d71f64ded003fed3fed31304379404c012423242224020602010301
020607251c1b1d1b1e1b030613260f250b2618191719020621041162001f
061a6201140e116200160c1a620124012062011b08206201121015620019
0a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811334123736333217
16111402062322272637101716333236373611342726272623220706024a
8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44354834
029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139e89b73
30213d53fe9c>TimesNewRomanPSMT AddT42Char 
2 4500 20 <000100f000000306056800160097401440186018a018e018040018401802
76008600020e411301690141000901a00022000301690141000801a00023
000001f8000f016900160141000001f2400e010f0f020902010509080c02
0300ba01f70003014940120e0e0f401135300f7f0f900fa00f040f1917ba
022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c111239011139
00f5edfc01f52b2b3130005d01715d13253311141616171521353e023511
34272626232207f0014a21133c5cfe026038160a07251a254204c7a1fb87
72381e022525021d317a02dc942a201e1f00>TimesNewRomanPSMT AddT42Char 
2 4728 21 <0001002c000003ab0568001e0168408207180b3917181c3d3418401c3d34
19401c3d340f1e161629073c074907a9070640205b045a085b175a186b08
741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020f904f917
1515011d0419051b15191619171d180709170b180b1d3419471989178f20
0718190202171a190c19060d031902050618171615140713040db8016840
090940140c3f80090109b80333400c10051a8f19019f19af190219ba0333
0003018db301020c1eb8018d400d0006e24f135f136f137f130413b80107
4013400001001a002040208020036020a020022019bb01f90003000d0140
40145f026f027f028f02bf02cf02df02ef020802191fba018e010100182b
4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d713c3ffd
71b10602435458b78f0901bf09cf0902005d71592be41112173911123901
111239390210b10602435458b47d198d1902005d590e3c8710057dc40ec4
31300171725d005d012b2b2b002b01032135000035342623220607233636
33321615140706070207213236363703ab5ffce0016101209e6e649f2625
19cf9ba5dd304aa6f93e01626c57461a0105fefb2501420198a981a67571
b9c6d4906767a2b5fef03810312d>TimesNewRomanPSMT AddT42Char 
2 5670 23 <00020020000003b90568000a000d00d74028160d010f00450d400f03400f
012a0c011507010206010309050601040c0b0d00040c0d04060c0d0db801
1c401207081407070808030407060c08001f0d010dbb019c0006000b019f
400d050106090806060805040c0c04bb0149000300080166400b09090f03
019f03af030203b801f74018013f0001001a000f01600fa00fe00f030f06
40070107190eba018e010100182b4e10f4713c105d71f65d3c4df45d713c
10e610fd3c003f3f392f103c103c10ed10fd723c1139113901111239872e
2b047d10c4011112390f0f0f313000725d015d7172011523112311213501
331123110103b9b6a5fdc202756ea5fe2401f48efe9a0166800382fc8c02
a1fd5f00>TimesNewRomanPSMT AddT42Char 
2 6964 27 <0003007cffe8038a0568001900260033017a40ba59010109331f332a276f
337a22800b800c801a801b822580268a33a918a51aa725b30cb41ab726bb
27c50ac50bd70d1607000a01060d021a0927160d171a250d250e4b018c01
830d850ea9000e3b003a014b004b0149285f015b275c336a006a01690267
266a2768337b017c27762c7c338f048f0580078008821182128f148f1698
049608941196129b16a626ad27ad33b804b608e90bea0ce90ee927e93229
070d09273a0039013832054408000c1a2704000c1a2704101720b80106b2
06052db80106b2130d1d4109010f00090140000901400030010f00100166
4010003540350240356035a035e035043523bc010f0003013e002a010f40
0a30174017901703171934ba01ee01e900182b4e10f45d4dedf4ed105d71
f6ede4f4ed003fed3fed111217390117393130437940322b2f1e22111604
08152521052362001f071d62012c142a62002e1230620122042062011e08
2062012b162d62002f112d6200002b2b2b2b012b2b2b2b2b818181810171
5d00715d0072012626353436333216151406071617161514062322272635
343625363635342623220615141617130606151416333236353427260189
a15dcca9a4c86cabb0394cdab1c16c567901317840766666803531365350
8d6d6c82264702ab84a05684bfb2724c9e6b884e66718fcb7961735ab1d6
6c7d4f6977764f34682ffee746a560819b7a5748396a>TimesNewRomanPSMT AddT42Char 
2 7886 29 <000200b0ffe4019003b0000b00170042b10319b80125401d0d67369019a0
1902064000070c40120b0f4015034009349015a0150215bc0125001800d2
010000182b10f65df4ed10ed003fed3fed3130015d2b0132161514062322
2635343613321615140623222635343601212e41412e2e41412c2f41422e
2e414103b0412e2e41412e2e41fd13422e2e41412e2e4200>TimesNewRomanPSMT AddT42Char 
2 11924 39 <0002002300000579054c00160021010340590b1b0b1d86109510d5100576
107614871098139915c91bc91dd41008181112141d1e03071501871a881e
022808061f1b002122071f1b0d21231721191f280e0e0d02192816160008
1c3c4f1201001210122012301240120512b8ffdeb60d0d0255124923b8ff
c0403e3f354023012023017023a023e023032321170613130255170c0f0f
0255170c0d0d0255172207060c10100255060c0f0f0255061a0d0d025506
9e226163182b4e10f42b2b2b3c4dfd2b2b2b3c4d105d71722bf62b5d724d
ed003f3c10ed3f3c10ed1139392b2b31304379401c1a1e0f15102514261e
0f1c56011a151c56011d111f56011b131956002b2b012b2b2b2b8181005d
7101725d7133353332373635113427262323352120041215100706212716
33320011100023220723335624161c274d3302280130013dc1acc1fe75db
7f56e80132fecef05a7325372173036c7f202c258afebed3fee5bed4621c
01460117011901441d00>TimesNewRomanPSMT AddT42Char 
3 0 47 <00010029000004b7054c002000b0401b1000100120002001402257026702
77028a209920a920b9200c0122b8018e40330e643655025c1e02091f1b03
212216371b113d220a1f1b102123201f2000300040000300e71c1110021c
2302030800ac016c02b802c4402f16170613130255170c0f0f0255170c0d
0d0255172209090a0c101002550a0c0f0f02550a1a0d0d02550a9e21615d
182b4e10f42b2b2b3c4d10fd2b2b2b3cf4f4ed003f3ced3f3c10e45d3939
2b2b2b313001722b015d0117032135333237363511342726232335211526
0606151114171616333332363604962174fbe6335625151c274d3302666c
5720100c3283639c7e68017707fe9025382074036b7f202c2525012a4079
fcac531f15142e75>TimesNewRomanPSMT AddT42Char 
3 1452 50 <00020048ffe10578056b000c001b00b140319712a807a90aa91004770179
07870188070443080d28000315280609183c1f032f030200031003200330
0340030503491db8ffc0401a3f35201d401d021d113c10092009020f091f
090209491c6463182b4e10f45d724ded4d10712bf65d724ded003fed3fed
313043794032011b0f250b261a2613260e0c112d001b01182d011407112d
001605182d01100a0d2d0119020d2d011208152d001704152d002b2b2b2b
012b2b2b2b2b2b2b2b81015d5d0120001110002120001110373617220706
111017163332121110272602ed01080183fe7afeebfee8fe83dcbff7b66e
898e6db3bff9896e056bfe6ffed4fecbfe68018e013c0143ccb14987a8fe
bcfeb4b388012a0141015cab8800>TimesNewRomanPSMT AddT42Char 
3 8514 62 <000100a8fe6a0260056b0007008140184009010007090304052603021007
06260001120917171a03b8ffc0b2403503b8ffc0b23a3503b8ff80402337
351003200370038003048003900302a0030103870506b001015002600202
02190809b80131b321d25a182b2b4ef4713c4d10fd3cf45d71722b2b2b4e
456544e6003f3c4dfd3c3f3cfd3c01111239393130015d01211121152111
210260fe4801b8fede0122fe6a07014ff99c>TimesNewRomanPSMT AddT42Char 
3 8812 64 <0001004bfe690203056b0007008440244009a00902600901030405060726
0100100504260203123f09010917171a010102b00605b8ffc0b23a3505b8
ffc0401e37351005200570058005048005900502a0050105873000af0002
00190809bc013100210054010000182b2b4ef45d4df45d71722b2b3cfd3c
4e10456544e65d003f3c4dfd3c3f3cfd3c01123939313001715d13211121
352111214b01b8fe480122fede056bf8fe4f0664>TimesNewRomanPSMT AddT42Char 
3 9360 68 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>TimesNewRomanPSMT AddT42Char 
3 10378 69 <0002fffbffe403b9058e0016002401d2b10202435458b11e05b8fff44010
1010025505140c00180a0d0d0255180cb8ffe6b4131302550cb8fffcb40d
0d02550cb8fffcb40f0f02550cb8fff4400d101002550c0c181700040209
13b803e240111440090d02551415001b25090b21590207003fed3fed3fdd
2bed11121739012f2b2b2b2bdd2bc010c62f2bcd31301bb1060243545840
2618170003020913141500215902071b25090b1e0505262500180c0d0d06
55180210100655180cb8fff8b40d0d06550cb8ffeeb7101006550c0c2625
1112392f2b2bdd2b2bc01112392fcd003fed3fed3fddcd1112173931301b
4079102601a406b606b507ea1f040526430d5d3620267503760486038704
a603ab08074707013a0814270d41131e144418170c00041b160010210121
5902071b25090b1e311f0590050260058005af050305eb0c16000018240c
0c100d500d700d900d04800d900db00d03000d100d200d300db00dc00dd0
0d070db8ffc0b73c350d6025c24b182b4e10f42b5d71723c4d10fd3c103c
10fd5d72ed003fed3fed723f111739f5edfc01f53130437940281920030b
072620031e20011a0a181c0019180b0c1c081e20011f04212001190b1b1c
001d061b2000002b2b2b012b103c103c2b2b2b81810071015d2b005d0172
595901363332161514070623222627113426262322072725331111161633
323635342623220706013b859a8dd2a28bab50a5560f20181c2a0e01132d
336d395b9d9d6435352802f6b9f1d1f495803a3a03b59c481a102370fd28
fddc3233c8bfb0bd1b14>TimesNewRomanPSMT AddT42Char 
3 10958 70 <00010046ffe4034a03af002101f5b2080401b102024354584020021a060c
10100255060c0f0f0255060c0d0d02550616250f0907602170210221b8ff
c0b513130255211db8ffd4b4131402551db8ffcab6121202551d3103002f
ed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040732a2d34
0023430d5d36170d5705021c135404530553065407581b581c0767057605
80008021b41bc520d020e000e50509370147015618551c5f236018601c76
18721c8a128e1390119018a601a402af23b301c101c707c719e908e41cea
20f4011806024a1257128b1f8b208023f02307112001bcffe00020ffe000
1fffe0b2001d00b803464030102101602180210200211021202150216021
70219021a021b021c021d021e021f0210d21661ddf0f010fc7162509071d
b8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f0c020c2f
100030004000600070009000b000c000e00009300040000200aa731a831a
02501a019f1a011ab8010c4012f006010006100620063006400605064322
43b9029100182b4e10f472714ded5d7271fd715de47172ed003fed2b2b3f
eded7110f45d7172e412b10602435458400a531d631d731d03931d01005d
7159393130383838013801715d005d017200722b2b435c58b4001018391b
b8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b2b2b2b01
2b5959017101060623220235340033321615140623222726262726232207
061514163332373637034a25d8839ce80101b487ae312c3b1e110b23233e
643d51a189624e3734015cb5c30106dfd8010e8f4d262f2615761f1e4a62
a1a4fb432e79>TimesNewRomanPSMT AddT42Char 
4 0 71 <00020044ffe40405058e001f002d024bb1020243545840262f4010100255
2906180d0d025506080f0f0255060c101002550600201d160a0d0d025516
0b20b8fff4401112120255200c1313025520180d0d025520b8fff8400c0f
0f0255201810100255201cba03e2001dffc0b6091002551d1f12b803e240
101340090e0255131400252509072c2c03002fed3fed3fdd2bed2fdd2bed
012f2b2b2b2b2bc0dd2bc410c02f2b2b2bcd31302b1bb106024354584052
1213140000200b0303252509071c701d01401d601d021d1f0b2c2c030b16
0c0d0d0655160410100655160b20141010065520040f0f065520020d0d06
5520202f2e290c0d0d06552906180d0d065506062f2e1112392f2bcd2b11
12392f2b2b2bc0cd2b2b003fed3fdd5d5dcd3fed1217393fddcd31301bb9
002fffc0b34747342fb8ffc040422b2e34602f7c047c058a04802faf2fc0
2f07402f802f02002f162a152b55055508542b960707480701202f370a47
0a560a9804a72aa02f07c02ff02b022020002021baffe0000bffe040453c
204f205e20660a6c207a209f009f20aa07b907c62a0b260813270c41121e
1344151d2716411c1e1d441f0020210b042c1500252509071f2c012c2c1f
030b1f000b210c20b8016740121560168016af16031f1690160216eb2950
06b8ffc0b3282e3406b8ffc0b7473506432e437f182b4e10f42b2b4dedfd
725d3cfd3c3c3c3c3c003f3ced723fed3f11173910f5edfc01f50010f5ed
fc01f531304379401a262b0408272526082920002b042920002807252001
2a052c2000002b2b012b2b2b8181005d3838383801715d00710172715d2b
2b5959250606232226353412333217353426262322072725331114161633
323717052335112e0223220706151416333202c743804a96e0f8c3794f0f
20181a2b0d01112d0f21161b2d0bfef02e063c632f58455bb06c5b67463d
fbc5c501474da99d481a102370fbdda1471c112371c901d84470394f68c8
cad7>TimesNewRomanPSMT AddT42Char 
4 722 72 <0002004cffe4035303b00014001d037db10202435458402808161415000c
0f100255000e0c0f1002550e0c0d0d02550e153040000120003000020000
10000200b8ffc0b41314025500b8ffc040111111025500000b1b25110700
0710070207b8ffc0b40f10025507b8ffc0b5131402550704b8ffd6b41314
025504b8ffcab71212025504310b0b003fed2b2bc42b2b5d3fed12392f2b
2b5d5d5ded012f2b2bdd2bc02fcdc031301bb10602435458401d158000a0
00b0000320003000400003000010000200000b1b2511070807b8ffc04024
1010065510072007b00703000760078007a00704079204a204b204030431
0b0b07081614b8fff440260d0d065514141f1e15000c0d0d0655000c0f0f
0655000e0c0f0f06550e160d0d06550e0e1f1e1112392f2b2bdd2b2bc011
12392f2bcdd0cd003fed5dc45d5d2b323fed12392f5d5d5dcd31301b4019
125f185d1960006014d6030519201c3917201c3916401c391fb8ffc0400a
434a34081f430d5d361fb8ffc0b32828341fb8ffc040532a2e341b061909
58135e165f175a185b1a07010309060709080c0515490689028c06870c8a
10851da302ab18b513d402d90fda10f402f3031312600760087007800789
09c107c80ff007080401070d84020309baffe00006ffe0404a3609460247
094f1f5402540962027202891389199913a409a40ab808b509b00ac702e7
02e00cf40a1408d007010007d007027107010007100720079007a007b007
06077d041400301615b8ffc040131239125f157f159f15df150415151bd3
040104b8ffd0b2143904b8ffe8b2133904b8ffd84048123904310b0b5c1b
011b25110707cc0816281b390f16016f167f168f160316f4141480080130
0890080230088f08df08031008400860087008b008e0080608aa0e150400
89000200b8032c4012300e400e500e03000e100e200e03f00e010eb8ffc0
4009434a340e431e434b182b4e10f42b7172724dfd713c10fd5d715d713c
10ed5d712b10ed003fed723fed2b2b2b7211392f5d4358b26f15015d592b
3cfd3c10f45d5d7172393130015d00383800715d014358b4060001020271
5971722b2b2b2b2b2b2b0072435c58b90007ffc0400b23390c402d390d40
2d3908b8ffc0b2283907b8ffc0b2283906b8ffc0b21b3907b8ffc0b21b39
08b8ffc0b21b3907b8ffc0b20a3908b8ffc0b20a3907b8ffc0b2093908b8
ffc0400e093915101939192011390d201139002b2b012b002b2b2b2b2b2b
2b2b2b2b2b2b595959130617163332363717060623220235341233321615
252126272626232206da016464875a852d1f15ca98a5ebf1b69ac6fd8701
a805101963365383023bcc747463781489e10101d9eb0107cbaa3a582438
4081>TimesNewRomanPSMT AddT42Char 
4 2358 74 <0003003dfe4603db03af003b00490059039740821216509726993603002d
105b02762a765302002a062e06528b20043f374f5b6f377526705b8f048f
05831784188f358a3e83458f4b864f95179518994fb804b905b417b418c9
34c94bc05bd05be05bf05b1b1a201533103514361f5b05a7084a363f1b00
160336214a1b0019431211100f0e0d0c0b0a090913131409088025011225
b8ffdeb41214025525b8ffc0b3140c3f25b8ffc0400b120b3f9f25af25bf
250325b8019eb5582b80210121b8ffde400d12140255129f21af21bf2103
21b8ffc0b3140c3f21b8ffc0b3120b3f21b8019e4018904a014a40140c3f
4a40120b3f4a2c121202554a50140114b8010840136f08017f0801084011
14025508350699430143b80331400c194a0a2f1901501980190219bd02d2
00060009034d003c0331400a0607195101512c2c0f4dbe03300030001e03
300039004d0330401f1030016f308f309f300330180f100255300c101006
553035392e0380540154b8ffdeb40d0f025554b8ffcab41014025554b8ff
deb41010065554b8fff0400a0d0f065554251f280128b8ffc04016171a34
8f28014f287028c028d02804280e1010065528b8fff4b40f0f025528b8ff
ee4012101002552875205b305b405ba05bd05b055bb8ffc0401c0b0c345b
0e8f96460146101010065546312016010f167016cf160316b8fff2401110
100255160c11110255160c1010065516b802bd4013993f013f3130035003
02500301000310030203b8ffc0b3191d3403b8ffc0b30b0c3403b8fff4b4
1313025503b8fff4b70f10025503695a5bba01780021010ab189182b2bf6
2b2b2b2b5d7172ed72fd2b2b2b5d71ed2b72e4102b71f62b2b2b5d712b72
ed2b2b2b2b7110e4f42b2b5d72ed10ed10ed003fed723ffde610ed5d713f
10ed7210f42b5d5ded72102b2b2b5ded2b2b5d4358b4cf21df21025d592b
72f4ed5d2b2b2b4358b4cf25df25025d5972103c103c1112173911123939
111239011112393912393931304379407a4b573a4524351c1d1718010526
25323133313431030641264f262e252a265625541c011c3b1e1c004b354d
200042013f20003d053f1c00502d4d1c00522b5420014418461c01552757
1c0156571d3a1b1c011c1b3b004c314a20014b4a3536400243200001003e
043c1c014e2f511c0053295120004517431c00002b2b2b2b103c2b103c10
3c2b103c103c2b103c2b012b2b2b2b2b2b2b2b2b2b2b2b2a2b8181818181
8101725d00715d01710072435c58400a2e10120b3f351012392eb8fff0b1
1239002b2b2b590126263534363332173332161716151407060623231615
140623222706061514161716171617161615140706232227263534373637
363726263534360122061514171633323635342726010606151417163332
363534272627260135545acda08360c22b0e030605030f2b7738c4a54447
2c1f21301c70ce3d5d6f6a9cfbc1854b0b1135075f342b3901154a644434
504c624533fef82f303a64bdb4ab33349ae1014e29935988c44005060917
1a0a0506487080b614263914112007040305090d70527163925732361818
254209631f311f235e0287767a9e5742727a9f5a42fc8133582530243e7f
483416160406>TimesNewRomanPSMT AddT42Char 
4 4350 76 <0002003c00000207058e000b00220249b10202435458b90024ffc0401d0d
0d0255120d080d0d02550d21181010025521180f0f02552113180309b8ff
eeb41313025509b8ffe0b40d0d025509b8ffd6b40f0f025509b8ffceb610
100255090d18b8fff4b41313025518b8ffe2b40d0d025518b8ffe0b40f0f
025518b8ffd6b5101002551820b803e240174f216f217f210321226f0001
0060060106400f0f025506b8ffc0b71313025506220613002f3fd62b2b5d
cd5d10dd5ded012f2b2b2b2bcd2f2b2b2b2bcd10c4c62b2b102bc4313001
2b1bb10602435458400d20121010065521121010065506b8ffc0b44b4b06
5506b8ffc0b44141065506b8ffc04019373706554006010006a006026006
0106000020212207130309b8fff6401c10100655090924230d0210100655
0d020f0f06550d0c0d0d06550d18b8fff0b41010065518b8fff6b40f0f06
5518b8fff0b70d0d0655181824231112392f2b2b2bcd2b2b2b1112392f2b
cd002f3fddcd3fcd5d71722b2b2b3130012b2b1b40199024016024702490
24a024f024052024502402402450240224b8ffc0b332323424b8ffc0b338
3a3424b8ffc0b32d303424b8ffc0b323253424b8ffc0402e191a3418291e
134a220d291e124a2321271941201e21440c190c1390060106390000220c
0713120a900901093903b8ffc0b2433503b8ffc0400f3f35036b0c0c0d19
0d2418402b3918b8ffc0401a363a34901801501801601870189018a018f0
180518b223b2a3182b10f65d71722b2bed3c103c10f42b2bed72003f3c3f
3c3fed7211123910f5edfc01f52b2b3130012b2b2b2b2b015d715d017259
590132161514062322263534361311141616331521353236363511342726
26232207272501292a3b3b2a2a3c3b7e193141fe43432e1b09071e1a1c28
0e0114058e3b2a2a3c3c2a2a3bfe21fd2056391c24241a3c550161952c20
190f2470>TimesNewRomanPSMT AddT42Char 
4 5622 78 <000100110000040c058e003703bfb10202435458402b1a0c10100255190c
10100255200c0d0d0255110c0d0d0255010c0d0d0255200c0d1002551f16
0d10025526b8ffe8b40d0d025526b8ffe8402b10100255262136272e1f01
21080d0d025521040f0f025521060c0c0255212e0e131302552e16121202
552eb8fff6b40d0d02552eb8fff4b40f0f02552eb8ffeeb4101002552eb8
fffe40100f0f02552e1001111f04260a171a2528b8ffe8b40d0f025528bb
03e20026003503e240123640090d025536370026190c0c0d0d02550cb803
e2b6090c0d0f025509b803e2b10a06003fed2bed2b2f2f3fdd2bed10fd2b
c0c0c011121739012f2b2b2b2b2b2bdd2b2b2bc0c610c4c610c42b2b3130
002b2b2b2b2b012b2b1b40b90f391f3902120610010610019309950a900b
900c9b0f9a119b129a1f9f39b30a0a3919391a5f105f115f1f6c106f116f
1f9b0209eb1eed1f028009810ec603c60fe902e90fed11ef12083f113f18
3f1f38203f39460f720a750f082f022a10202520262f3938013810071510
5501521054200423105701570fe610f510054911481fc209c20ae30a0517
0916101f1d1f1f4502420f060b110f130d1a0c1d0f1e0e1f065303550453
0559105411541306190f1d1d1e1f530204b10602435458402f3618101006
55200110030a27353637007c0c010c7b0901090a0619270c0c3938012102
10100655210c0f0f0655212eb8ffe6b4101006552eb8fff0b40f0f06552e
b8fffab70d0d06552e2e39381112392f2b2b2bdd2b2bc01112392f002f2f
3fcd5dcd5d3fddcd111217393130012b1b4055100f01021112131310191f
1a1e192e291e2727220a02091e0a21291e26272336272f41351e3644002f
000b13101024201f14200102201f0f101030010214010102012000201f13
010427020f0a1010180a37000017b801ec404c180ccc0b0b0a0627262619
19180a0b300c800c02f00c01d00ce00c02700cc00c020c2f17179f180118
1a1f39013921242e00242f2f002e102eb02ec02ed02e05502e01802e902e
022e603839b80178b321a66e182b2b4ef471725d3c4d10ed10ed4e1072f6
5d3c4d10f45d5d5d713c003f3c103c103c3f3c10ed10ed3f3c191112392f
12393912173901103c3c870e2e182b0e7d10c487082e182b0e7d10c40011
12391810f5edfc01f52b10ed0110c02b10ed0110c0870e7d10c4c4070759
313001727271715d005d72015d5d5d5d5d5d00710071435c58b90010ffe8
4014120b3f1f281239012812391d400f391f280f3902b8ffc0b20b390bb8
ffc0b211390fb8ffc0b2113909b8ffc0b211390cb8ffc0b11139012b2b2b
2b002b2b2b2b2b012b59015d590111373637363534262735211506060707
131617161716331521353636353427011114161617152135323736373635
113426262322072725014fe94a0c082126018e526d41ebeb62223024193e
fe43261b28fee7192e4dfe2e4623150b0f0e201a152a110110058efc71d4
44120c0c141d022020022e3bd9fed77b212f0e0a242401151317330167fe
d0593818012424110b17215103429f471b112370>TimesNewRomanPSMT AddT42Char 
4 6752 79 <0001003d0000020f058e00150191b10202435458b90017fff6401d0d0d02
55140c06010701080d0d025501040f0f025501060c0c0255010cb8fff2b4
131302550cb8ffeab40c0c02550cb8ffe2b40d0d02550cb8ffd6b4101002
550cb8ffdeb50f0f02550c05bd03e2000803e20007001303e2400b131440
090d025514150007002f3fdd2b32ed10eded012f2b2b2b2b2bcd2b2b2bc4
10c410c631302b1bb1060243545840271312101006551414101006551314
1500000007010c0d0d065501021010065501040f0f0655010cb8fff0b410
1006550cb8fff4b40f0f06550cb8fff0b70d0d06550c0c17161112392f2b
2b2bcd2b2b2b002f3f3fddcd3130012b2b1bb79017c017f0170317b8ffc0
b33f463417b8ffc0403a393b340117b20d64365017014017501760177017
9017a017f017070c291e074a2201291e06272314270d41131e1444150000
07060a0001240d0cb8ffc0b33f46340cb8ffc0401a353b34900c01500c01
600c700c900ca00cf00c050cb216b2a3182b10f65d71722b2b3cfd3c003f
3c3f3cf5edfc01f52b2b3130015d0171012b012b2b017259590111141616
3315213532363635113426262322072725017b193447fe3f3f2e1a0e1f18
1a28110111058efb4156381d24241a3c5503409b471a10237000>TimesNewRomanPSMT AddT42Char 
4 8454 81 <0001000c000003f703af003302d3b102024354584017354012120255300c
10100255310c101002550e080f1623b8ffea402e10100255231d24290808
0d0d025508040f0f025508060c0c025508162412120255161a0d0d025516
0c1313025516b8fff4b40f0f025516b8ffdeb41010025516b8ffee40260c
0c025516001d040f0f02551d080d0d02551d060c0c02551d291812120255
290e1313025529b8ffeeb41010025529b8fff0b40f0f025529b8fff6b40d
0d025529b8fffa400a0c0c025529001c022430b803e24009314009100255
31320dbe03e2001003e2002203e2002503e24009240f2432071a2c020700
3fed3f2f2f10ededecec10dd2bed11123939012f2b2b2b2b2b2bdd2b2b2b
c02f2b2b2b2b2b2bcd2b2b2b10c410c42b10c410c431302b2b2b1bb10602
435458405e2f1610100655300c10100655311610100655001c0224303132
071a2c02070f24080c0d0d065508021010065508060f0f06550816020d0d
065516021010065516080f0f065516163534001d0c0d0d06551d080f0f06
551d02101006551d29b8fff0b40d0d065529b8fff0b41010065529b8fff2
b70f0f0655292935341112392f2b2b2bdd2b2b2bc01112392f2b2b2bcd2b
2b2b002f2f3fed3fddcd111239393130012b2b2b1b403a35402a35083560
0d5d3630355035603570359035052d040140356035703580359035b03506
b035d03502b0350160358035c035031d0816291e0fb8030f40112229291e
244a2208291e0e4a231d291e23b8030e402e2331272a41301e31441c0023
3233071a2c02072423230f0f0e0a17162407900801b008010f0870089f08
cf080408b802bd401b29331d242a1f295029602970290480299029b02903
002910290229b8ffc04009141634296034a67f182b10f62b5d71723cfd3c
10fd5d71723cfd3c003f3c103c103c3fed3f3c113939f5edfc01f52b2b2b
2b3130437940121819030604251903171c01050618051a1c012b01103c2b
2b8181015d71015d71005d01722b2b595901363332161716151114171616
331521353332363736351134262322071114171616331521353332363511
342626232207272533014ba1924b6c20160e0b3142fe3b1340330a04414d
77760b0e314bfe3b1446310f1f1a1c270f01142b02edc24b563c7cfe7957
1f191c242427260f4f01777d7182fe1d5d161d1b242447640154a5481a0f
2470>TimesNewRomanPSMT AddT42Char 
4 9326 82 <00020045ffe403b903af000f001d020cb10202435458401c140c06101002
550c0c0f0f02550c0c0d0d02550c100b0b02550c1a04b8fff4b410100255
04b8fff440130b0b0255040c0f0f0255041725080b10250007003fed3fed
012f2b2b2bcd2f2b2b2b2bcd31301bb10602435458400910250007172508
0b1ab8fff4401b0d0d06551a04140c0d0d0655140c100f0f06550c100d0d
06550c04b8fff0400b0d0d065504041e0c0c1f1e1112392f11392f2b102b
2bcd2b10cd2b003fed3fed31301b404512801501a716b616c501c909c41d
d9090612e70a0148094516571585018c09890fd91b071f403235041f430d
5d369f1f01c615c91a02401f014908102500071725080b1204b8ffc0402b
120b3f4f0401400401d0040140045004600470049004b0040604ec0c4012
0b3f400c9f0c020c431e434b182b4e10f4722b4ded5d5d71722b4bb02853
4bb050515ab10c1e49b11f0449525a58bd000cffc00004ffc0001fffc038
3838594358bc001a0332000400140332e910e91bbc001a03320004001403
32ed10ed59003fed3fed313043794036011d12250e2602251c260a250626
110f1420001d011a2001160914200018071a2001130d1020011b03102001
150b17200019051720002b2b2b2b012b2b2b2b2b2b2b2b2b2b8101720171
722b2b71015d0143584011750275067a0a7a0e7a1278167518751c085d59
5d005d435c5840091c1011391b10113915b8fff0b10b39002b2b2b595959
013217161514060623222726353436361722060615141233323635342726
0200d07e6b76cf7fcf7a677dcc53356b429f82617e694703af9e87af7bfc
80a58bad7ef977413f9e7cc8fedea0c3f48c6000>TimesNewRomanPSMT AddT42Char 
4 9946 83 <0002fff9fe4a03ba03af002700390222b1020243545840293b4013130255
320a2a131302550a060f0f02550a1813190020032913080d0d0255132016
1313025520b8fffab40d0d025520b8fffcb40f0f025520b8fff4400d1010
02552003282b12040e061aba03e2001703e2400b1819182e250e36590607
27b803e24009004009100255000107003fdd2bed3fed2fed2f2f10eded11
121739012f2b2b2b2bdd2bc0c010c6c410c42f2b2bcd31302b1bb1060243
5458b90032fffcb50d0d0655320ab8fff040180d0d06550a0a3b3a032913
0c0d0d06551302101006551320b8fff6b40d0d065520b8ffee401b101006
5520203b3a0328060e270001190e2e250e0b365906070107003f3fed3fed
3f10ddcd11123939011112392f2b2bdd2b2bd0c01112392f2bcd2b31301b
407e0a3b430d5d36391049105b10891104862c013b2c3f3b4b2c5b2c6a11
6a2c73087911792c8408a507e908f9090d303b583359346c3404403b012f
08032829121320291e19862213291e1827230027214f271e004402122b28
03042e1036013659060702072e250e0b19180e32311f0a900a02600a800a
af0a030aeb200213b80167401b2020502170210280210100211021b021c0
21d0210521603ac24b182b10f65d71723c10fd3c10fd5d72ed003f3c3fed
3f3fed7211173910f5edfc01f52b2b030e103c3c3c3c3130437940202f35
070d082534260c26302535073220012f0d3220013309362001310b2e2000
002b2b012b2b2b2b2b2b81810171725d00715d2b59590325331536363332
171615140706232227262711141616331521353316373636351134262623
220705111417161633323736353427262322070602011a26478f4f8a5c71
8870aa4a36283217394bfe20193727131510231e18250134090e6d53643e
515c4058302f24033972d679616c84d4ed9b7f150f2dfee95e331e252501
160b316403625930180e7ffeaa6f233a584e66b9d2714e181200>TimesNewRomanPSMT AddT42Char 
4 11264 85 <0001000d000002b703af002801b5b1020243545840282a4013130255061f
171127040f0f025527181f0111080d0d025511040f0f025511060c0c0255
111fb8fff4b40f0f02551fb8fff6b40d0d02551fb8ffee4011101002551f
14121202551f0e131302551fb8fffc400b0f0f02551f011003181619bb03
e20018002603e2400e4f276f277f2703272807180c0307003fcd2f3fdd5d
ed10fdc011123939012f2b2b2b2b2b2bdd2b2b2bc010c4c62b10c410c431
302b1bb10602435458402301100318262728076f097f0902090c03071806
1f01110c0d0d0655110410100655111fb8fffab40d0d06551fb8ffeab40f
0f06551fb8ffeab7101006551f1f2a291112392f2b2b2bdd2b2bc010c400
2f3fcdcd5d3fddcd1112393931301b406f2002200f3202320f4002400f82
0407402a015f2a011f291e18272211291e17862327272041261e2744000a
0b2a111420100104188009010939100c010c590303000718170a5f060140
0601062e1f2a012a0011241f1f1f2001802090200200201020b020c020d0
2005206029a66e182b4e10f45d71723c4d10fd3c1072e47172003f3c3f3c
10ed72ed5d11173901111239390010f5edfc01f52b2b3130017271005d59
590115363332161514062322262322070607111417161633152135323736
373635113426262322072725014c73793748342423571512152d30130d42
3efe2b4622190a050d231a1f270a011503afcece432c27364514295efe49
4c271b24242416102311500163a03d1c0f247000>TimesNewRomanPSMT AddT42Char 
4 11824 86 <00010064ffe402d503af00310434b1020243545840273340131302553340
0b0b02550201181010025501180f0f0255010f1b1a08270c0b0b02552721
0fb8ffe0b4101002550fb8fff440320f0f02550f310708270f2104122b05
017905016c050105252f0101012a0719771e01631e011e25201a01601a70
1a021a120b003fc45d5ded5d5d2f3fc45ded5d5d5d1217393f012f2b2bcd
2f2bcdd4cd10d42b2bcd31302b2b1bb106024354584032210f2708042a16
1e122e05022a3107601a701a021a19124b05016b057b050205252a07441e
01641e741e021e25120b01210fb8fff2401a0d0d06550f0f33321a080e0d
0d06550827120d0d0655272733321112392f2bcd2bc41112392f2bcdc400
3fed5d5d3fed5d5d10c4c45d3f10c4123911123912173931301b4029092c
192c0212122e400b392c280b391814590c5a269b109424050a070a280a29
603370338033060f33b8012040870d5d36cb0dcb0ec424c425d723d624d9
2ce604e623e624e92c0b123f2c5d2c6e2d7d2c8f018f028f038015801a80
1b801c892d8f2e0d0f010f020a03090c061c0a2cc822c923081c03161412
1c161d19291b2c9909990a9b20932393240b122b0d282c4a2c4f335f3378
29782c860ea823af33e803e61c0c2908311e00bd021e011f012f010201b8
012bb200bd2eb8011a40112a181e19bd1b1e1a1f1a01101a201a021ab801
2bb219bd16b8011a4022121224230d0b040f2724230d0b04051e01c7002e
2f2a31000005252a071a7e191918b803464014162f1e25120b02cc120101
12cf21df21ef210321b80314400b700f01600f700f900f030fb801364019
271a192e1f0801082c9f270160277027802703202730270227ba01200032
0120b14b182b4e10f45d71724ded72f43c10fd5d71fd5d4358b2ff21015d
59392f435c58b2ff01015d59ed003fede4f43c10ed3fed3c103c10e410ed
1112173901111217394358400a242323240d0b140d0d0b870e2e2b0e7d10
c459180010ecf4ed5d720110edf4ed0010ecf4ed5d0110edf4edb1060243
5458b42e20090d34002b5931304379401c28291f20101106071f11211c01
0629081c0020101e1c000728051c01002b2b012b2b81818181015d435840
09fb07f610f611fb28045d5901720071005d435840199f019f029f039f0b
9a0d9015901a901b901c992297239f2d0c5d595d2b017100722b2b435840
0b2f232f248b2c9b249b2c055d59435c584011282019390928193901400a
3902400a391bb8ffc0b20a391ab8ffc040190a392e400a392c400a392c40
09390c101e123f0e201e123f0eb8fff0b21b390eb8fff0b2193924b8ffe8
b2133923b8ffe8b213390cb8ffe8b613392c1813391bb8ffc0b212391ab8
ffc0400f123901401239024012392c20123924b8fff0400f0f392c180f39
03100d392e400d3923b8fff040120d390c100d392c200d392c1811392c18
1139002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b59005d59590111232626232206151417161717161514062322
272623220723113316163332363534262427263534363332171633323637
02902126775c4656201f5f92cbbd75546c2115170d21211c9e62455761fe
de2d2d9b7b364d331110120c03affec8936a4a2d3828292e4763a27d991e
0a1a01478c8e5139455e903a39577198170f0e18>TimesNewRomanPSMT AddT42Char 
4 13044 87 <00010014fff1023c04c1001b01fdb1020243545840251d40121302551d40
101002550b0c18121202550c15130105131812120255130e1313025513b8
fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255130b082c
0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b2bddc010
c62f2bcd31302b2b1bb106024354584019170c10100655160c1010065515
0c10100655160c101006551bb8ffe8b4101006551ab8ffe8b41010065519
b8ffe8401410100655700b010b0f1b01156914014914011404b8011b401c
0106082c0f0b1b0105021010065505080f0f0655050c0d0d06550513b8ff
eeb41010065513b8fff0b40f0f065513b8fffab70d0d065513131d1c1112
392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d3130012b2b
2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d99119919bf15bf
16b819e819079f1d01891a014f0c4f0d5f0c5f0df5180506181518271803
161518191a030118191a03141ba00103153004b8011b401c010330020201
060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec402c200c01
0c2e2f1db01d021d000101040405241450130180130100131013b013c013
d013e0130613601cab89182b10f65d71723cfd3c103c103c105df45ded10
ed10f45d3c003ffde43f3c10ed10edfd3c10e40111173900111739123931
3000715d0171725d00722b59590111331523111416333236373306062322
2626351123353636373637014ad6d63328213e11272380442e582a913773
2d172904c1fed346fdae593e29286263335f63026821166948266500>TimesNewRomanPSMT AddT42Char 
4 13642 88 <00010002ffe403fd039400250230b1020243545840162740121202550801
080d0d0255010b20281212025520b8fffc400b0f0f0255201e0d0d025520
b8ffe4401310100255201a080d0d02551a121c1212025512b8fff8b40f0f
025512b8fffab40d0d025512b8fff4b5101002551224ba03e2001703e240
0e1825060b200e18061d2c0e0b0708b8ffc0b509100255080a002fdd2bcd
3fed3f1239393f10edec012f2b2b2b2bcd2b2f2b2b2b2bc0dd2bc431302b
1bb1060243545840570740086008700803080a0b200b180e242517182506
18061d2c0e0b0b010810100655010a0f0f0655010c0d0d065501201a040f
0f06551a04101006551a0a0d0d06551a1208082620080f0f065520060d0d
065520202612b8fff2b41010065512b8fff6b40f0f065512b8fff6b70d0d
0655121227261112392f2b2b2b11392f2b2b11392f10cd2b2b2b10cd2b2b
2bc0003fed3f3f10cd10cd111239393fdd5dcd31301b40350127600d5d36
202760277027b02704340b371f3a20481f4820051a08134f1e182723214f
1e25272308270141071e0844200b251d08b8014540130a00252519191806
1d2c0e0e0a0b0a0b0b2120b80167400e00b001010f0170019f01cf010401
b802bd402512191a241212501390130280139013b01303001310132013b0
13c013d01306136026c27f182b4e10f45d71723c4d10fd3c10fd5d713cfd
3c3c103c003f3c10ed3f3c103c103c10ed11123939f5edfc01f52b2b3130
437940101b1c0f111c0f1a1c0010111b101d1c002b01103c2b8181005d01
5d2b59590111141616333237170523350606232226263511342626073521
11141633323637113426273503630f21161f270efeee2d767c454d712c1c
37480141593f2b6d4b395a0394fdd59f471c112371c28042598c80019941
321b0125fd9b8050364c02074e370225>TimesNewRomanPSMT AddT42Char 
4 14318 89 <00010011ffe403ed0394002002c1b10202435458b60909001a120614be03
e2001103e2002003e2000203e2b10006003fededecec3f2f1239012f3130
1bb106024354584031180a091b080909222109001a0b1416101006551413
06112a10100655111206021610100655020106201610100655200006003f
cd2b3fcd2b3fcd2b3fcd2b3f1239011112392fddcd10ddcd31301b400912
530a58185b190319b8ffd8b20b3522b8ffc0406115351419141a2309220a
2111201224182019201a3a09390a3a12391835193a1a4a084909440a4518
4519491a69089c0899099d1a9a1b9f22a900a808a509a219a21aa81bbe08
b509b60ab618b719ba1abb1bc022d518f60af618fb1a2d9f090122b8ffc0
b332603422b8ffc0b32b313422b8ffc0b31e293422b8ffc0b347473422b8
ffc0b327273422b8ffc0b323233422b8ffc0b311113422b8ffc04040191c
340f227c007201720270057c20810585118f22093a08340a3418391bc606
c021d81a07880a891887190337124818021318141e13001b201e00120a11
1e12b8ff86402c091a192018191930090a1409090a1b1a1a240908140909
08070605040408021e01131212010100061a190b18b8011d40125f0a0110
0a240a9f0ab60ad40a050a7d091bb80167401040062fa008b908ce080308
7d0919751abb011b00200009ffc0b30f123409b8ffc0b3191d3409b8ffc0
b2323509b8ffc0b70c350009c0090209b801bfb610220180220122b8ffc0
b3191d3422b8ffc0b60f133421ab89182b19102b2b7172f45d2b2b2b2b1a
fd18e61910f45d18f41aed1910f45d7218ed003f3c3f3c103c103c10ed01
111739872e2b0e7d10c487052e182b0e7d10c42b180010ed0110c00010ed
0110c00010ed0110c03130015d5d5d712b2b2b2b2b2b2b2b005d015d2b2b
0172435c58b50a20160d3f08b8ffe8b7160d3f09240b3918b8ffe0b21339
0ab8ffe0400a1339082013391b201339012b2b2b2b002b012b2b59595913
211523220615141713133635342726262335211506070607012301262627
26271101af1c272915d5d617080b2234012b3414231cfebb29feb916281f
113203942526202330fe06020d381d0e090f0b252504111e46fcee030536
2f100908>TimesNewRomanPSMT AddT42Char 
5 0 90 <0001000dffe405b40394002c03cdb10202435458b626211e110e022cb803
e2400e00092618080428251f060f060006003f3f3f2f2f173910fdd0d0d0
d0c0012f31301bb10602435458b90026ffe840440d0d0655181c0d0d0655
081c0d0d065518101010065508101010065508182609040028211e110e02
792c012c00752501250b752801280b1f060f0600062c2c2d21212e2d1112
392f11392f003f3f3f3f5d3f5d10dd5dd0d0d0d0c01112173931302b2b2b
2b2b1bb1122eb8ffc0401c3f351627201020112527202e5f2e6909702ee9
25e928f825f8280c2eb8ffc0b213352eb8ffc040c81b1f34212e2e296436
1d19191f1b23102e040a261d262c2639265517a717a718a726080b253724
37274f004c014d074908472446274d284d298807801080118d2588288829
802e9a109417a718a725bb10b925b928bf2ec825c828d925d928d02e1f00
050407061504170925072709280629351743104311500552075618522989
0b8f1088188919892388258826802e17870986178726030d095901771077
110409090826262725250a0107021e011017111e102023211e2000292c1e
000f0a0e1e0f1f191e1e1fb8ff86b308282720b8ff7d4040182524200807
080907242928142929282627262527300809140808091815181915240a25
140a0a25232424301819141818192926231918170a0908070a002821bb01
ec0020001e01ecb31f010f11bb01ec0010000e01ec400a0f0f10101f1f20
200002bb01ec0001002c01ecb301000618bb016a0025000801a6400f2840
2725252424280b20fc0f650a01b801b1b4c000652923b801084015401b2f
501901a01901bd19cf19df19031992242f18b8011bb7200f250110250125
b8ffc0b30b0c3425bb0110002600150167400c400a2f5f26014026802602
26b801ecb4097d272f08ba011b0008011b400a200028018028f0280228b8
ffc0b50b0c3428a007b80167401b5029018029010029102920294029b029
c029d0290729602dab89182b10f65d7172edf42b5d71191aedfde4f4ed5d
7118f41aed1910f42b5d711afde4f45d717218e41aed10f41aed10f4ed00
3f3c103c103c1a10ed10ed3f3ced10ed103c103c103c103c10ed10ed103c
10ed10ed1112173987052e2b0e7d10c4870e2e182b087d10c487052e182b
087d10c4870e2e182b087d10c42b2b180010ed0110c00010ed0110c00010
ed0110c00010ed0110c00010ed0110c00010ed0110c00710083c083c3130
015d5d71015d005d01722b2b2b015d2b435c58b52610140c3f24b8fff0b3
140c3f13b8ffe0b21d3917b8ffe0b21d3917b8ffe0b2143917b8fff0b217
3925b8fff0b2153917b8fff0b11539012b2b2b2b2b2b2b2b595959132115
060615141713132726272627352115060706151417131336353426273521
1506070123030123012626270d0180352111c4c5341827163c01b4481e14
08d0c114273901215729fece29e5fef525feda1d383c039425041e1c1f2c
fdf101ad873c170e032525031710231415fdf201fb3620131e0225250d69
fceb0249fdb7030249330d00>TimesNewRomanPSMT AddT42Char 
5 2300 92 <0001000cfe4603f4039400320222b10202435458401409092b2a03007827
01271d120614181010025514b803e2b611181010025511b803e2b6021810
10025502b803e2b632181010025532b803e2b10006003fed2bed2bec2bec
2b3f2fcd5d121739012f31301bb10602435458401e092b001d1411027a32
01320012060006237a2701271d0f141433000034331112392f11392f003f
dd5dc43f3f10dd5dd0d0c0111239393130b0104b5458bd001bfff80019ff
f0001afff0b10a1038383838591b40ab0910120b3f0e2b95290213342e16
64368305850602090905120819081a092b141a26092412241a262b380136
12351b47126809680a6919661a631b682c7808790a7919771a741b782c89
0a891998009809971a962bbb00d034e506230909082b2b2c2a2a0a010802
1e011319141e13002c321e00120a111e12260820191a1a302a0a142a2a0a
2c2b2b24090814092b2a09082b2a1a09040a082c2b2a1a190a0908082313
12120101000627b8ffc0400e120b3f272f23391d0f3417171a19b8010840
1b8f0a01df0af00a02600a700aef0a030a7d3f094f095f0903097d08b801
0e401d2bd60f20010f209f2002208f5f2c012f2c3f2c022c193334a921a6
7f182b2b4ef45d724de45d71e4fdf45df45d5d71fd4e456544e6003f4dfd
e42b3f3c103c103c121739011112173987082e2b0e7d10c4870e2e182b7d
10c401111239180010ed0110c00010ed0110c00010ed0110c00010ed0110
c00710083c083c3130015d01712b005d012b595913211523220615141713
133635342726262335211506060706070106062322263534363332171633
32363737012627262726270c01ab152d2d21dfcd110708222b012a252818
0919fe8b36af513b4c37302139280a1e472441feb70f2119101733039425
271d2745fe3201fa292812090b0d25250418210e3ffc6e8588442c2a3316
0f3e599f02b31f2e230c100c>TimesNewRomanPSMT AddT42Char 
2 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>TimesNewRomanPSMT AddT42Char 
TimesNewRomanPSMT /CharStrings get begin
/space 3 def
/zero 19 def
/one 20 def
/two 21 def
/four 23 def
/eight 27 def
/colon 29 def
/D 39 def
/L 47 def
/O 50 def
/bracketleft 62 def
/bracketright 64 def
/a 68 def
/b 69 def
/c 70 def
/d 71 def
/e 72 def
/g 74 def
/i 76 def
/k 78 def
/l 79 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
/v 89 def
/w 90 def
/y 92 def
end
TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 56 /eight put
dup 58 /colon put
dup 68 /D put
dup 76 /L put
dup 79 /O put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/SMGPAO+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/SMGPAO+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four 
3{/.notdef}rp /eight /.notdef /colon 9{/.notdef}rp /D 7{/.notdef}rp /L 
2{/.notdef}rp /O 11{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/b /c /d /e /.notdef /g /.notdef /i 
/.notdef /k /l /.notdef /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
SMGPAO+TimesNewRomanPSMT nf
SMGPAO+TimesNewRomanPSMT*1 [0 -10 -10 0 0 0 ]msf
-84.8543 411.604 mo
(Downloaded by [Linkopings universitetsbibliotek] at 20:28 24 October 2012 )
[-7.21985 -5 -7.21985 -5 -2.78 -5 -4.43985 -5 -4.43985 -5 -2.5 -5 
-5 -2.5 -3.32993 -6.10992 -2.78 -5 -5 -5 -5 -2.78 -5 -5 
-3.88992 -2.5 -5 -5 -2.78 -5 -4.43985 -3.32993 -3.88992 -2.78 -2.78 -4.43985 
-2.78 -3.88992 -5 -2.78 -5 -2.78 -2.78 -5 -2.78 -4.43985 -5 -3.32993 
-2.5 -4.43985 -2.78 -2.5 -5 -5 -2.78 -5 -5 -2.5 -5 -5 
-2.5 -7.21985 -4.43985 -2.78 -5 -5 -4.43988 -3.3299 -2.5 -5 -5 -5 
-5 0 ]ysh
/SMGPAN+CMR10*1 uf
/SMGPAN+CMR10 uf
/OQOAAA+CMR10 uf
/SMGPAM+CMSY10*1 uf
/SMGPAM+CMSY10 uf
/FFZAAA+CMSY10 uf
/SMGPAL+CMMI10*1 uf
/SMGPAL+CMMI10 uf
/NXMBAA+CMMI10 uf
/SMGPAK+CMR6*1 uf
/SMGPAK+CMR6 uf
/FZLBAA+CMR6 uf
/SMGPAJ+CMSY8*1 uf
/SMGPAJ+CMSY8 uf
/WLDBAA+CMSY8 uf
/SMGPAI+CMR8*1 uf
/SMGPAI+CMR8 uf
/XTCAAA+CMR8 uf
/SMGPAG+Times-Italic*1 uf
/SMGPAG+Times-Italic uf
/DWVAAA+Times-Italic uf
/SMGPAH+CMMI8*1 uf
/SMGPAH+CMMI8 uf
/UBRAAA+CMMI8 uf
/SMGPAF+Times-Bold*1 uf
/SMGPAF+Times-Bold uf
/QDGBAA+Times-Bold uf
/SMGPAE+Times-Roman*1 uf
/SMGPAE+Times-Roman uf
/NBIAAA+Times-Roman uf
/SMGPAO+TimesNewRomanPSMT*1 uf
/SMGPAO+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Procedure [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
